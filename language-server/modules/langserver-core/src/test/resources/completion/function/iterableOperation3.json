{
  "position": {
    "line": 2,
    "character": 11
  },
  "source": "function/source/iterableOperation3.bal",
  "items": [
    {
      "label":"isSingleton()(boolean)",
      "kind":"Function",
      "detail":"Function",
      "documentation":"Check whether the XML sequence contains only a single element.\n",
      "sortText":"121",
      "insertText":"isSingleton()",
      "insertTextFormat":"Snippet"
    },
    {
      "label":"isEmpty()(boolean)",
      "kind":"Function",
      "detail":"Function",
      "documentation":"Check whether the XML sequence is empty.\n",
      "sortText":"121",
      "insertText":"isEmpty()",
      "insertTextFormat":"Snippet"
    },
    {
      "label":"elements()(xml)",
      "kind":"Function",
      "detail":"Function",
      "documentation":"Get all the items that are of element type in an XML sequence.\n",
      "sortText":"121",
      "insertText":"elements()",
      "insertTextFormat":"Snippet"
    },
    {
      "label":"select(string qname)(xml)",
      "kind":"Function",
      "detail":"Function",
      "documentation":"Get all the items that are of element type, and matches the given qualified name, in an XML sequence.\n",
      "sortText":"121",
      "insertText":"select(${1:qname})",
      "insertTextFormat":"Snippet"
    },
    {
      "label":"getItemType()(string)",
      "kind":"Function",
      "detail":"Function",
      "documentation":"Get the type of a XML as a string. If the XML is singleton, type can be one of \u0027element\u0027, \u0027text\u0027, \u0027comment\u0027 or \u0027pi\u0027.\nReturns an empty string if the XML is not a singleton.\n",
      "sortText":"121",
      "insertText":"getItemType()",
      "insertTextFormat":"Snippet"
    },
    {
      "label":"getElementName()(string)",
      "kind":"Function",
      "detail":"Function",
      "documentation":"Get the fully qualified name of the element as a string. Returns an empty string if the XML is not a singleton.\n",
      "sortText":"121",
      "insertText":"getElementName()",
      "insertTextFormat":"Snippet"
    },
    {
      "label":"getTextValue()(string)",
      "kind":"Function",
      "detail":"Function",
      "documentation":"Get the text value of a XML. If the XML is a sequence, concatenation of the text values of the members of the\nsequence is returned. If the XML is an element, then the text value of the sequence of children is returned. If\nthe XML is a text item, then the text is returned. Otherwise, an empty string is returned.\n",
      "sortText":"121",
      "insertText":"getTextValue()",
      "insertTextFormat":"Snippet"
    },
    {
      "label":"setChildren(xml children)",
      "kind":"Function",
      "detail":"Function",
      "documentation":"Set the children of an XML if its a singleton. An Error otherwise. Any existing children will be removed.\n",
      "sortText":"121",
      "insertText":"setChildren(${1:children})",
      "insertTextFormat":"Snippet"
    },
    {
      "label":"copy()(xml)",
      "kind":"Function",
      "detail":"Function",
      "documentation":"Make a deep copy of an XML.\n",
      "sortText":"121",
      "insertText":"copy()",
      "insertTextFormat":"Snippet"
    },
    {
      "label":"strip()(xml)",
      "kind":"Function",
      "detail":"Function",
      "documentation":"Strips any text items from an XML sequence that are all whitespace.\n",
      "sortText":"121",
      "insertText":"strip()",
      "insertTextFormat":"Snippet"
    },
    {
      "label":"slice(int startIndex, int endIndex)(xml)",
      "kind":"Function",
      "detail":"Function",
      "documentation":"Slice and return a subsequence of the an XML sequence.\n",
      "sortText":"121",
      "insertText":"slice(${1:startIndex}, ${2:endIndex})",
      "insertTextFormat":"Snippet"
    },
    {
      "label":"setAttributes(map attributes)",
      "kind":"Function",
      "detail":"Function",
      "documentation":"Sets the attributes to the provided attributes map.\n",
      "sortText":"121",
      "insertText":"setAttributes(${1:attributes})",
      "insertTextFormat":"Snippet"
    },
    {
      "label":"toJSON($anonType$builtin$11 options)(json)",
      "kind":"Function",
      "detail":"Function",
      "documentation":"Converts a XML object to a JSON representation.\n",
      "sortText":"121",
      "insertText":"toJSON(${1:options})",
      "insertTextFormat":"Snippet"
    },
    {
      "label":"selectDescendants(string qname)(xml)",
      "kind":"Function",
      "detail":"Function",
      "documentation":"Searches in children recursively for elements matching the qualified name and returns a sequence containing them\nall. Does not search within a matched result.\n",
      "sortText":"121",
      "insertText":"selectDescendants(${1:qname})",
      "insertTextFormat":"Snippet"
    },
    {
      "label":"removeAttribute(string qname)",
      "kind":"Function",
      "detail":"Function",
      "documentation":"Remove an attribute from an XML.\n",
      "sortText":"121",
      "insertText":"removeAttribute(${1:qname})",
      "insertTextFormat":"Snippet"
    },
    {
      "label":"appendChildren(xml children)",
      "kind":"Function",
      "detail":"Function",
      "documentation":"Append children to an XML if its an element type XML. Error otherwise.\nNew children will be appended at the end of the existing children.\n",
      "sortText":"121",
      "insertText":"appendChildren(${1:children})",
      "insertTextFormat":"Snippet"
    },
    {
      "label":"removeChildren(string qname)",
      "kind":"Function",
      "detail":"Function",
      "documentation":"Remove children matching the given name from an XML. This operation has no effect\nif the XML is not an element type XML.\n",
      "sortText":"121",
      "insertText":"removeChildren(${1:qname})",
      "insertTextFormat":"Snippet"
    },
    {
      "label":"foreach(\u003c@lambda:function\u003e)",
      "kind":"Function",
      "detail":"Function",
      "sortText":"121",
      "insertText":"foreach(function(xml v) {\n\t${1}\n});",
      "insertTextFormat":"Snippet"
    },
    {
      "label":"map(\u003c@lambda:function\u003e)",
      "kind":"Function",
      "detail":"Function",
      "sortText":"121",
      "insertText":"map(function(xml v) returns (any) {\n\t${1}\n});",
      "insertTextFormat":"Snippet"
    },
    {
      "label":"filter(\u003c@lambda:function\u003e)",
      "kind":"Function",
      "detail":"Function",
      "sortText":"121",
      "insertText":"filter(function(xml v) returns (boolean) {\n\t${1}\n});",
      "insertTextFormat":"Snippet"
    },
    {
      "label":"count()",
      "kind":"Function",
      "detail":"Function",
      "sortText":"121",
      "insertText":"count();",
      "insertTextFormat":"Snippet"
    },
    {
      "label":"length()",
      "kind":"Function",
      "detail":"Function",
      "sortText":"121",
      "insertText":"length();",
      "insertTextFormat":"Snippet"
    },
    {
      "label":"freeze()",
      "kind":"Function",
      "detail":"Function",
      "sortText":"121",
      "insertText":"freeze();",
      "insertTextFormat":"Snippet"
    },
    {
      "label":"isFrozen()",
      "kind":"Function",
      "detail":"Function",
      "sortText":"121",
      "insertText":"isFrozen();",
      "insertTextFormat":"Snippet"
    },
    {
      "label":"stamp(anydata a)",
      "kind":"Function",
      "detail":"Function",
      "sortText":"121",
      "insertText":"stamp(${1});",
      "insertTextFormat":"Snippet"
    },
    {
      "label":"clone()",
      "kind":"Function",
      "detail":"Function",
      "sortText":"121",
      "insertText":"clone();",
      "insertTextFormat":"Snippet"
    },
    {
      "label":"convert(anydata a)",
      "kind":"Function",
      "detail":"Function",
      "sortText":"121",
      "insertText":"convert(${1});",
      "insertTextFormat":"Snippet"
    }
  ]
}
