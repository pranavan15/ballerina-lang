import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
type ('type')
WHITE_SPACE (' ')
identifier ('Employee')
WHITE_SPACE (' ')
record ('record')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('name')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('status')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('batch')
; (';')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
type ('type')
WHITE_SPACE (' ')
identifier ('Teacher')
WHITE_SPACE (' ')
record ('record')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('name')
; (';')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('age')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('status')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('batch')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('school')
; (';')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
type ('type')
WHITE_SPACE (' ')
identifier ('Foo')
WHITE_SPACE (' ')
record ('record')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('a')
; (';')
WHITE_SPACE ('\n    ')
! ('!')
... ('...')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
PUBLIC ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Stamp an `anydata` array as an `int` array.')
WHITE_SPACE ('\n    ')
anydata ('anydata')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('anydataArray')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
DECIMAL_INTEGER_LITERAL ('1')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('2')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('3')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('4')
] (']')
; (';')
WHITE_SPACE ('\n    ')
int ('int')
[ ('[')
] (']')
| ('|')
error ('error')
WHITE_SPACE (' ')
identifier ('intArray')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
int ('int')
[ ('[')
] (']')
. ('.')
identifier ('stamp')
( ('(')
identifier ('anydataArray')
) (')')
; (';')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('intArray')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
int ('int')
[ ('[')
] (']')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Element type of the array is 'int'"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Stamp an `int` array as `json`.')
WHITE_SPACE ('\n    ')
int ('int')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('intArrayValue')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
DECIMAL_INTEGER_LITERAL ('1')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('2')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('3')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('4')
] (']')
; (';')
WHITE_SPACE ('\n    ')
json ('json')
| ('|')
error ('error')
WHITE_SPACE (' ')
identifier ('jsonValue')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
json ('json')
. ('.')
identifier ('stamp')
( ('(')
identifier ('intArrayValue')
) (')')
; (';')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('jsonValue')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
json ('json')
[ ('[')
] (']')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Element type of the array is 'json'"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Stamp a `Teacher` record as an `Employee` record.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// This would not return an `error` since all fields match.')
WHITE_SPACE ('\n    ')
identifier ('Teacher')
WHITE_SPACE (' ')
identifier ('t1')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('name')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Raja"')
, (',')
WHITE_SPACE (' ')
identifier ('age')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('25')
, (',')
WHITE_SPACE (' ')
identifier ('status')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"single"')
, (',')
WHITE_SPACE ('\n                            ')
identifier ('batch')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"LK2014"')
, (',')
WHITE_SPACE (' ')
identifier ('school')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Hindu College"')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
identifier ('Employee')
WHITE_SPACE (' ')
identifier ('e')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('Employee')
. ('.')
identifier ('stamp')
( ('(')
identifier ('t1')
) (')')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('school')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
< ('<')
string ('string')
> ('>')
WHITE_SPACE (' ')
identifier ('e')
. ('.')
identifier ('school')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"School of the Employee is "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('school')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Stamp an `anydata` map as a `Teacher` record.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// This could return an `error` since all required fields may not be present.')
WHITE_SPACE ('\n    ')
map ('map')
< ('<')
anydata ('anydata')
> ('>')
WHITE_SPACE (' ')
identifier ('anydataMap')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('name')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Raja"')
, (',')
WHITE_SPACE (' ')
identifier ('age')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('25')
, (',')
WHITE_SPACE (' ')
identifier ('status')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"single"')
, (',')
WHITE_SPACE ('\n                            ')
identifier ('batch')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"LK2014"')
, (',')
WHITE_SPACE (' ')
identifier ('school')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Hindu College"')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
identifier ('Teacher')
| ('|')
error ('error')
WHITE_SPACE (' ')
identifier ('teacherValue')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('Teacher')
. ('.')
identifier ('stamp')
( ('(')
identifier ('anydataMap')
) (')')
; (';')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('teacherValue')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
identifier ('Teacher')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"'map<anydata>' is stamped as a 'Teacher'"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Stamp a tuple as an `int` array')
WHITE_SPACE ('\n    ')
( ('(')
int ('int')
, (',')
WHITE_SPACE (' ')
int ('int')
) (')')
WHITE_SPACE (' ')
identifier ('intTuple')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
( ('(')
DECIMAL_INTEGER_LITERAL ('1')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('2')
) (')')
; (';')
WHITE_SPACE ('\n    ')
int ('int')
[ ('[')
] (']')
| ('|')
error ('error')
WHITE_SPACE (' ')
identifier ('valueArray')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
int ('int')
[ ('[')
] (']')
. ('.')
identifier ('stamp')
( ('(')
identifier ('intTuple')
) (')')
; (';')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('valueArray')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
int ('int')
[ ('[')
] (']')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Tuple is stamped as an 'int' array"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Stamp a `json` value as a `Foo` record.')
WHITE_SPACE ('\n    ')
json ('json')
WHITE_SPACE (' ')
identifier ('j1')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('a')
: (':')
WHITE_SPACE (' ')
[ ('[')
QUOTED_STRING_LITERAL ('"a"')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"b"')
] (']')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
identifier ('Foo')
| ('|')
error ('error')
WHITE_SPACE (' ')
identifier ('recordValue')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('Foo')
. ('.')
identifier ('stamp')
( ('(')
identifier ('j1')
) (')')
; (';')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('recordValue')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
identifier ('Foo')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"JSON value is stamped as 'Foo'"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
