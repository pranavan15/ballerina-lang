import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('file')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('log')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// In this example, the listener monitors the directory specified in `path`.')
WHITE_SPACE ('\n')
LINE_COMMENT ('// As the recursive property is set to false,')
WHITE_SPACE ('\n')
LINE_COMMENT ('// the listener does not monitor the child directories of the main directory')
WHITE_SPACE ('\n')
LINE_COMMENT ('// that it listens to.')
WHITE_SPACE ('\n')
listener ('listener')
WHITE_SPACE (' ')
identifier ('file')
: (':')
identifier ('Listener')
WHITE_SPACE (' ')
identifier ('inFolder')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
WHITE_SPACE (' ')
( ('(')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('path')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"/home/ballerina/fs-server-connector/observed-dir"')
, (',')
WHITE_SPACE ('\n    ')
identifier ('recursive')
: (':')
WHITE_SPACE (' ')
BOOLEAN_LITERAL ('false')
WHITE_SPACE ('\n')
} ('}')
) (')')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// The directory listener should have at least one of these predefined resources.')
WHITE_SPACE ('\n')
service ('service')
WHITE_SPACE (' ')
identifier ('localObserver')
WHITE_SPACE (' ')
on ('on')
WHITE_SPACE (' ')
identifier ('inFolder')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// This resource is invoked once a new file is created in the listening directory.')
WHITE_SPACE ('\n    ')
resource ('resource')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('onCreate')
( ('(')
identifier ('file')
: (':')
identifier ('FileEvent')
WHITE_SPACE (' ')
identifier ('m')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
string ('string')
WHITE_SPACE (' ')
identifier ('msg')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Create: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('m')
. ('.')
identifier ('name')
; (';')
WHITE_SPACE ('\n        ')
identifier ('log')
: (':')
identifier ('printInfo')
( ('(')
identifier ('msg')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// This resource is invoked once an existing file is deleted from the listening directory.')
WHITE_SPACE ('\n    ')
resource ('resource')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('onDelete')
( ('(')
identifier ('file')
: (':')
identifier ('FileEvent')
WHITE_SPACE (' ')
identifier ('m')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
string ('string')
WHITE_SPACE (' ')
identifier ('msg')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Delete: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('m')
. ('.')
identifier ('name')
; (';')
WHITE_SPACE ('\n        ')
identifier ('log')
: (':')
identifier ('printInfo')
( ('(')
identifier ('msg')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// This resource is invoked once an existing file is modified in the listening directory.')
WHITE_SPACE ('\n    ')
resource ('resource')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('onModify')
( ('(')
identifier ('file')
: (':')
identifier ('FileEvent')
WHITE_SPACE (' ')
identifier ('m')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
string ('string')
WHITE_SPACE (' ')
identifier ('msg')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Modify: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('m')
. ('.')
identifier ('name')
; (';')
WHITE_SPACE ('\n        ')
identifier ('log')
: (':')
identifier ('printInfo')
( ('(')
identifier ('msg')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
