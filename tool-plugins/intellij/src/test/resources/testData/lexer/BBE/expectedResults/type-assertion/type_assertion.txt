import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
type ('type')
WHITE_SPACE (' ')
identifier ('Person')
WHITE_SPACE (' ')
record ('record')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('name')
; (';')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('age')
; (';')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
type ('type')
WHITE_SPACE (' ')
identifier ('Employee')
WHITE_SPACE (' ')
record ('record')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('name')
; (';')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('age')
; (';')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('empNo')
; (';')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
PUBLIC ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Define an `Employee` and assign it to a `Person` typed variable.')
WHITE_SPACE ('\n    ')
identifier ('Employee')
WHITE_SPACE (' ')
identifier ('employee')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('name')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Speedy Gonzales"')
, (',')
WHITE_SPACE (' ')
identifier ('age')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('4')
, (',')
WHITE_SPACE (' ')
identifier ('empNo')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
identifier ('Person')
WHITE_SPACE (' ')
identifier ('person')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('employee')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// The `person` variable is asserted to be of type `Employee`, and is assigned to another variable of')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// type `Employee`.')
WHITE_SPACE ('\n    ')
identifier ('Employee')
WHITE_SPACE (' ')
identifier ('employeeTwo')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
< ('<')
identifier ('Employee')
> ('>')
identifier ('person')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"asserted employee's name: "')
, (',')
WHITE_SPACE (' ')
identifier ('employeeTwo')
. ('.')
identifier ('name')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Asserting `person` to be of type `Person` will result in a panic, since `person` is inherently an `Employee` here.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// `trap` is used to trap the panic and retrieve it as an `error`.')
WHITE_SPACE ('\n    ')
identifier ('Person')
| ('|')
error ('error')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
trap ('trap')
WHITE_SPACE (' ')
< ('<')
identifier ('Person')
> ('>')
identifier ('person')
; (';')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('result')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
identifier ('Person')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"asserted person's name: "')
, (',')
WHITE_SPACE (' ')
identifier ('result')
. ('.')
identifier ('name')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Print the detail message from the error.')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('result')
. ('.')
identifier ('detail')
( ('(')
) (')')
. ('.')
identifier ('message')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
