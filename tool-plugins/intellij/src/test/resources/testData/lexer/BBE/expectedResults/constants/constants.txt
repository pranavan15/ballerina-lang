import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Constants are defined using the `const` modifier.')
WHITE_SPACE ('\n')
CONST ('const')
WHITE_SPACE (' ')
string ('string')
WHITE_SPACE (' ')
identifier ('GET')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"GET"')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Constants can be defined without type using `var` keyword. Then the type is inferred from the right hand side.')
WHITE_SPACE ('\n')
CONST ('const')
WHITE_SPACE (' ')
identifier ('POST')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"POST"')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// These constants can be used to create type definitions. This type definition can only hold `GET` or `POST` values.')
WHITE_SPACE ('\n')
type ('type')
WHITE_SPACE (' ')
identifier ('ACTION')
WHITE_SPACE (' ')
identifier ('GET')
| ('|')
identifier ('POST')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Integer constant.')
WHITE_SPACE ('\n')
CONST ('const')
WHITE_SPACE (' ')
int ('int')
WHITE_SPACE (' ')
identifier ('I')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('125')
; (';')
WHITE_SPACE ('\n\n')
PUBLIC ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// This is identical to the code line `ACTION get = "GET";`.')
WHITE_SPACE ('\n    ')
identifier ('ACTION')
WHITE_SPACE (' ')
identifier ('get')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('GET')
; (';')
WHITE_SPACE ('\n    ')
identifier ('testAction')
( ('(')
identifier ('get')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
identifier ('ACTION')
WHITE_SPACE (' ')
identifier ('post')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"POST"')
; (';')
WHITE_SPACE ('\n    ')
identifier ('testAction')
( ('(')
identifier ('POST')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// We can concatenate `I` with any other integer value.')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('value')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('I')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('10')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('value')
) (')')
; (';')
WHITE_SPACE ('\n\n')
} ('}')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('testAction')
( ('(')
identifier ('ACTION')
WHITE_SPACE (' ')
identifier ('action')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('action')
WHITE_SPACE (' ')
== ('==')
WHITE_SPACE (' ')
identifier ('GET')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"GET action"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('action')
WHITE_SPACE (' ')
== ('==')
WHITE_SPACE (' ')
identifier ('POST')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"POST action"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
