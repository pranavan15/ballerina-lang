import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// A record representing a `Person`.')
WHITE_SPACE ('\n')
PUBLIC ('public')
WHITE_SPACE (' ')
type ('type')
WHITE_SPACE (' ')
identifier ('Person')
WHITE_SPACE (' ')
record ('record')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('name')
; (';')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('age')
; (';')
WHITE_SPACE ('\n    ')
boolean ('boolean')
WHITE_SPACE (' ')
identifier ('married')
; (';')
WHITE_SPACE ('\n    ')
float ('float')
WHITE_SPACE (' ')
identifier ('salary')
; (';')
WHITE_SPACE ('\n    ')
identifier ('Address')
WHITE_SPACE (' ')
identifier ('address')
; (';')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// A record representing an `Address`.')
WHITE_SPACE ('\n')
PUBLIC ('public')
WHITE_SPACE (' ')
type ('type')
WHITE_SPACE (' ')
identifier ('Address')
WHITE_SPACE (' ')
record ('record')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('country')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('state')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('city')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('street')
; (';')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
PUBLIC ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Define an `Address` record.')
WHITE_SPACE ('\n    ')
identifier ('Address')
WHITE_SPACE (' ')
identifier ('address')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('country')
WHITE_SPACE (' ')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"USA"')
, (',')
WHITE_SPACE ('\n        ')
identifier ('state')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"NC"')
, (',')
WHITE_SPACE ('\n        ')
identifier ('city')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Raleigh"')
, (',')
WHITE_SPACE ('\n        ')
identifier ('street')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Daniels St"')
WHITE_SPACE ('\n    ')
} ('}')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Define a `Person` record.')
WHITE_SPACE ('\n    ')
identifier ('Person')
WHITE_SPACE (' ')
identifier ('person')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('name')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Alex"')
, (',')
WHITE_SPACE ('\n        ')
identifier ('age')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('24')
, (',')
WHITE_SPACE ('\n        ')
identifier ('married')
: (':')
WHITE_SPACE (' ')
BOOLEAN_LITERAL ('false')
, (',')
WHITE_SPACE ('\n        ')
identifier ('salary')
: (':')
WHITE_SPACE (' ')
DECIMAL_FLOATING_POINT_NUMBER ('8000.0')
, (',')
WHITE_SPACE ('\n        ')
identifier ('address')
: (':')
WHITE_SPACE (' ')
identifier ('address')
WHITE_SPACE ('\n    ')
} ('}')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Assign the `person` value to an `any` typed variable called `anyValue`.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// The type of the value held by `anyValue` is determined at runtime.')
WHITE_SPACE ('\n    ')
any ('any')
WHITE_SPACE (' ')
identifier ('anyValue')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('person')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Invoke the `.clone()` built-in method. The return type is either `Person` or `error`. Note that `error` could be ')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// returned if the variable on which `.clone()` is called is not of type `anydata`.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// If the type of the value that is cloned can be determined at compile time and is `anydata`, the type of the')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// return value is exactly the type of the value being cloned.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// e.g. `Person result = person.clone();`')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// If `person` is cloned instead of `anyValue`, at compile time the compiler will determine that the return type is')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// `Person`.')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('anyValue')
. ('.')
identifier ('clone')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// The type of the value held by an `any` typed variable is only determined at runtime.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Therefore, the type of the returned value on a clone attempt could be `error`, in case a non-`anydata` value is')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// found.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Check if the `.clone()` attempt is successful, and returns a `Person` value.')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('result')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
identifier ('Person')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Source value: "')
, (',')
WHITE_SPACE (' ')
identifier ('person')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Cloned value: "')
, (',')
WHITE_SPACE (' ')
identifier ('result')
) (')')
; (';')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Check reference inequality for the original value and the cloned value.')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Source and Clone are at two different memory locations: "')
, (',')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
!== ('!==')
WHITE_SPACE (' ')
identifier ('person')
) (')')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// If the result is an error, print out the detailed error message.')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('result')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
error ('error')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Cannot clone: "')
, (',')
WHITE_SPACE (' ')
identifier ('result')
. ('.')
identifier ('detail')
( ('(')
) (')')
. ('.')
identifier ('message')
) (')')
; (';')
WHITE_SPACE ('\n        ')
return ('return')
WHITE_SPACE (' ')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
