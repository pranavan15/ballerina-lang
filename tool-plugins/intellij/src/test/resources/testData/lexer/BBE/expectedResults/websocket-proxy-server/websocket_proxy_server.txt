import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('http')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('log')
; (';')
WHITE_SPACE ('\n\n')
final ('final')
WHITE_SPACE (' ')
string ('string')
WHITE_SPACE (' ')
identifier ('ASSOCIATED_CONNECTION')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"ASSOCIATED_CONNECTION"')
; (';')
WHITE_SPACE ('\n')
LINE_COMMENT ('// The Url of the remote backend.')
WHITE_SPACE ('\n')
final ('final')
WHITE_SPACE (' ')
string ('string')
WHITE_SPACE (' ')
identifier ('REMOTE_BACKEND')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"ws://echo.websocket.org"')
; (';')
WHITE_SPACE ('\n\n')
@ ('@')
identifier ('http')
: (':')
identifier ('WebSocketServiceConfig')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('path')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"/proxy/ws"')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n')
service ('service')
WHITE_SPACE (' ')
identifier ('SimpleProxyService')
WHITE_SPACE (' ')
on ('on')
WHITE_SPACE (' ')
new ('new')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('WebSocketListener')
( ('(')
DECIMAL_INTEGER_LITERAL ('9090')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// This resource triggered when a new client is connected.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Since messages to the server are not read by service until `onOpen` resource execution finishes,')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// operations which should happen before reading messages should be done in `onOpen` resource.')
WHITE_SPACE ('\n    ')
resource ('resource')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('onOpen')
( ('(')
identifier ('http')
: (':')
identifier ('WebSocketCaller')
WHITE_SPACE (' ')
identifier ('caller')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n        ')
identifier ('http')
: (':')
identifier ('WebSocketClient')
WHITE_SPACE (' ')
identifier ('wsClientEp')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
( ('(')
WHITE_SPACE ('\n            ')
identifier ('REMOTE_BACKEND')
, (',')
WHITE_SPACE ('\n            ')
identifier ('config')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
identifier ('callbackService')
: (':')
WHITE_SPACE (' ')
identifier ('ClientService')
, (',')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// When creating client endpoint, if `readyOnConnect` flag is set to')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// `false` client endpoint does not start reading frames automatically.')
WHITE_SPACE ('\n            ')
identifier ('readyOnConnect')
: (':')
WHITE_SPACE (' ')
BOOLEAN_LITERAL ('false')
WHITE_SPACE ('\n        ')
} ('}')
) (')')
; (';')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('//Associate connections before starting to read messages.')
WHITE_SPACE ('\n        ')
identifier ('wsClientEp')
. ('.')
identifier ('attributes')
[ ('[')
identifier ('ASSOCIATED_CONNECTION')
] (']')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('caller')
; (';')
WHITE_SPACE ('\n        ')
identifier ('caller')
. ('.')
identifier ('attributes')
[ ('[')
identifier ('ASSOCIATED_CONNECTION')
] (']')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('wsClientEp')
; (';')
WHITE_SPACE ('\n\n        ')
LINE_COMMENT ('// Once the client is ready to receive frames the remote function `ready`')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// of the client need to be called separately.')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('wsClientEp')
-> ('->')
identifier ('ready')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('err')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
error ('error')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error calling ready on client"')
, (',')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('err')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('//This resource is triggered when a new text frame is received from a client.')
WHITE_SPACE ('\n    ')
resource ('resource')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('onText')
( ('(')
identifier ('http')
: (':')
identifier ('WebSocketCaller')
WHITE_SPACE (' ')
identifier ('caller')
, (',')
WHITE_SPACE (' ')
string ('string')
WHITE_SPACE (' ')
identifier ('text')
, (',')
WHITE_SPACE ('\n                                ')
boolean ('boolean')
WHITE_SPACE (' ')
identifier ('finalFrame')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n        ')
identifier ('http')
: (':')
identifier ('WebSocketClient')
WHITE_SPACE (' ')
identifier ('clientEp')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE ('\n                    ')
identifier ('getAssociatedClientEndpoint')
( ('(')
identifier ('caller')
) (')')
; (';')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('clientEp')
-> ('->')
identifier ('pushText')
( ('(')
identifier ('text')
, (',')
WHITE_SPACE (' ')
identifier ('finalFrame')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('finalFrame')
) (')')
; (';')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('err')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
error ('error')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error occurred when sending text message"')
, (',')
WHITE_SPACE ('\n                            ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('err')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('//This resource is triggered when a new binary frame is received from a client.')
WHITE_SPACE ('\n    ')
resource ('resource')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('onBinary')
( ('(')
identifier ('http')
: (':')
identifier ('WebSocketCaller')
WHITE_SPACE (' ')
identifier ('caller')
, (',')
WHITE_SPACE (' ')
byte ('byte')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('data')
, (',')
WHITE_SPACE ('\n                                ')
boolean ('boolean')
WHITE_SPACE (' ')
identifier ('finalFrame')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n        ')
identifier ('http')
: (':')
identifier ('WebSocketClient')
WHITE_SPACE (' ')
identifier ('clientEp')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE ('\n                        ')
identifier ('getAssociatedClientEndpoint')
( ('(')
identifier ('caller')
) (')')
; (';')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('clientEp')
-> ('->')
identifier ('pushBinary')
( ('(')
identifier ('data')
, (',')
WHITE_SPACE (' ')
identifier ('finalFrame')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('finalFrame')
) (')')
; (';')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('err')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
error ('error')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error occurred when sending binary message"')
, (',')
WHITE_SPACE ('\n                            ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('err')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('//This resource is triggered when an error occurs in the connection.')
WHITE_SPACE ('\n    ')
resource ('resource')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('onError')
( ('(')
identifier ('http')
: (':')
identifier ('WebSocketCaller')
WHITE_SPACE (' ')
identifier ('caller')
, (',')
WHITE_SPACE (' ')
error ('error')
WHITE_SPACE (' ')
identifier ('err')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n        ')
identifier ('http')
: (':')
identifier ('WebSocketClient')
WHITE_SPACE (' ')
identifier ('clientEp')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE ('\n                        ')
identifier ('getAssociatedClientEndpoint')
( ('(')
identifier ('caller')
) (')')
; (';')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
identifier ('e')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('clientEp')
-> ('->')
identifier ('close')
( ('(')
identifier ('statusCode')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1011')
, (',')
WHITE_SPACE ('\n                        ')
identifier ('reason')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Unexpected condition"')
) (')')
; (';')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('e')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
error ('error')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error occurred when closing the connection"')
, (',')
WHITE_SPACE ('\n                            ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('e')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n        ')
identifier ('_')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('caller')
. ('.')
identifier ('attributes')
. ('.')
identifier ('remove')
( ('(')
identifier ('ASSOCIATED_CONNECTION')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Unexpected error hense closing the connection"')
, (',')
WHITE_SPACE ('\n                        ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('err')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('//This resource is triggered when a client connection is closed from the client side.')
WHITE_SPACE ('\n    ')
resource ('resource')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('onClose')
( ('(')
identifier ('http')
: (':')
identifier ('WebSocketCaller')
WHITE_SPACE (' ')
identifier ('caller')
, (',')
WHITE_SPACE (' ')
int ('int')
WHITE_SPACE (' ')
identifier ('statusCode')
, (',')
WHITE_SPACE ('\n                                ')
string ('string')
WHITE_SPACE (' ')
identifier ('reason')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n        ')
identifier ('http')
: (':')
identifier ('WebSocketClient')
WHITE_SPACE (' ')
identifier ('clientEp')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE ('\n                        ')
identifier ('getAssociatedClientEndpoint')
( ('(')
identifier ('caller')
) (')')
; (';')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('clientEp')
-> ('->')
identifier ('close')
( ('(')
identifier ('statusCode')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('statusCode')
, (',')
WHITE_SPACE (' ')
identifier ('reason')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('reason')
) (')')
; (';')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('err')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
error ('error')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error occurred when closing the connection"')
, (',')
WHITE_SPACE ('\n                            ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('err')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n        ')
identifier ('_')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('caller')
. ('.')
identifier ('attributes')
. ('.')
identifier ('remove')
( ('(')
identifier ('ASSOCIATED_CONNECTION')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('//Client service to receive frames from the remote server.')
WHITE_SPACE ('\n')
service ('service')
WHITE_SPACE (' ')
identifier ('ClientService')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
@ ('@')
identifier ('http')
: (':')
identifier ('WebSocketServiceConfig')
WHITE_SPACE (' ')
{ ('{')
} ('}')
WHITE_SPACE (' ')
service ('service')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('//This resource is triggered when a new text frame is received from the remote backend.')
WHITE_SPACE ('\n    ')
resource ('resource')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('onText')
( ('(')
identifier ('http')
: (':')
identifier ('WebSocketClient')
WHITE_SPACE (' ')
identifier ('caller')
, (',')
WHITE_SPACE (' ')
string ('string')
WHITE_SPACE (' ')
identifier ('text')
, (',')
WHITE_SPACE ('\n                                ')
boolean ('boolean')
WHITE_SPACE (' ')
identifier ('finalFrame')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n        ')
identifier ('http')
: (':')
identifier ('WebSocketCaller')
WHITE_SPACE (' ')
identifier ('serverEp')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE ('\n                        ')
identifier ('getAssociatedServerEndpoint')
( ('(')
identifier ('caller')
) (')')
; (';')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('serverEp')
-> ('->')
identifier ('pushText')
( ('(')
identifier ('text')
, (',')
WHITE_SPACE (' ')
identifier ('finalFrame')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('finalFrame')
) (')')
; (';')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('err')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
error ('error')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error occurred when sending text message"')
, (',')
WHITE_SPACE ('\n                            ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('err')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('//This resource is triggered when a new binary frame is received from the remote backend.')
WHITE_SPACE ('\n    ')
resource ('resource')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('onBinary')
( ('(')
identifier ('http')
: (':')
identifier ('WebSocketClient')
WHITE_SPACE (' ')
identifier ('caller')
, (',')
WHITE_SPACE (' ')
byte ('byte')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('data')
, (',')
WHITE_SPACE ('\n                                ')
boolean ('boolean')
WHITE_SPACE (' ')
identifier ('finalFrame')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n        ')
identifier ('http')
: (':')
identifier ('WebSocketCaller')
WHITE_SPACE (' ')
identifier ('serverEp')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE ('\n                        ')
identifier ('getAssociatedServerEndpoint')
( ('(')
identifier ('caller')
) (')')
; (';')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('serverEp')
-> ('->')
identifier ('pushBinary')
( ('(')
identifier ('data')
, (',')
WHITE_SPACE (' ')
identifier ('finalFrame')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('finalFrame')
) (')')
; (';')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('err')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
error ('error')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n           ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error occurred when sending binary message"')
, (',')
WHITE_SPACE ('\n                            ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('err')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('//This resource is triggered when an error occurs in the connection.')
WHITE_SPACE ('\n    ')
resource ('resource')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('onError')
( ('(')
identifier ('http')
: (':')
identifier ('WebSocketClient')
WHITE_SPACE (' ')
identifier ('caller')
, (',')
WHITE_SPACE (' ')
error ('error')
WHITE_SPACE (' ')
identifier ('err')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n        ')
identifier ('http')
: (':')
identifier ('WebSocketCaller')
WHITE_SPACE (' ')
identifier ('serverEp')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE ('\n                        ')
identifier ('getAssociatedServerEndpoint')
( ('(')
identifier ('caller')
) (')')
; (';')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
identifier ('e')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('serverEp')
-> ('->')
identifier ('close')
( ('(')
identifier ('statusCode')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1011')
, (',')
WHITE_SPACE ('\n                        ')
identifier ('reason')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Unexpected condition"')
) (')')
; (';')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('e')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
error ('error')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error occurred when closing the connection"')
, (',')
WHITE_SPACE ('\n                            ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('e')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n        ')
identifier ('_')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('caller')
. ('.')
identifier ('attributes')
. ('.')
identifier ('remove')
( ('(')
identifier ('ASSOCIATED_CONNECTION')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Unexpected error hense closing the connection"')
, (',')
WHITE_SPACE ('\n                        ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('err')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('//This resource is triggered when a client connection is closed by the remote backend.')
WHITE_SPACE ('\n    ')
resource ('resource')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('onClose')
( ('(')
identifier ('http')
: (':')
identifier ('WebSocketClient')
WHITE_SPACE (' ')
identifier ('caller')
, (',')
WHITE_SPACE (' ')
int ('int')
WHITE_SPACE (' ')
identifier ('statusCode')
, (',')
WHITE_SPACE ('\n                                ')
string ('string')
WHITE_SPACE (' ')
identifier ('reason')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n        ')
identifier ('http')
: (':')
identifier ('WebSocketCaller')
WHITE_SPACE (' ')
identifier ('serverEp')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE ('\n                        ')
identifier ('getAssociatedServerEndpoint')
( ('(')
identifier ('caller')
) (')')
; (';')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('serverEp')
-> ('->')
identifier ('close')
( ('(')
identifier ('statusCode')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('statusCode')
, (',')
WHITE_SPACE (' ')
identifier ('reason')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('reason')
) (')')
; (';')
WHITE_SPACE ('\n            ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('err')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
error ('error')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error occurred when closing the connection"')
, (',')
WHITE_SPACE ('\n                                ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('err')
) (')')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n        ')
identifier ('_')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('caller')
. ('.')
identifier ('attributes')
. ('.')
identifier ('remove')
( ('(')
identifier ('ASSOCIATED_CONNECTION')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Function to retrieve associated client for a particular caller.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('getAssociatedClientEndpoint')
( ('(')
identifier ('http')
: (':')
identifier ('WebSocketCaller')
WHITE_SPACE (' ')
identifier ('ep')
) (')')
WHITE_SPACE ('\n                                        ')
returns ('returns')
WHITE_SPACE (' ')
( ('(')
identifier ('http')
: (':')
identifier ('WebSocketClient')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('http')
: (':')
identifier ('WebSocketClient')
WHITE_SPACE (' ')
identifier ('wsClient')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE ('\n            ')
< ('<')
identifier ('http')
: (':')
identifier ('WebSocketClient')
> ('>')
identifier ('ep')
. ('.')
identifier ('attributes')
[ ('[')
identifier ('ASSOCIATED_CONNECTION')
] (']')
; (';')
WHITE_SPACE ('\n    ')
return ('return')
WHITE_SPACE (' ')
identifier ('wsClient')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Function to retrieve the associated caller for a client.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('getAssociatedServerEndpoint')
( ('(')
identifier ('http')
: (':')
identifier ('WebSocketClient')
WHITE_SPACE (' ')
identifier ('ep')
) (')')
WHITE_SPACE ('\n                                        ')
returns ('returns')
WHITE_SPACE (' ')
( ('(')
identifier ('http')
: (':')
identifier ('WebSocketCaller')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('http')
: (':')
identifier ('WebSocketCaller')
WHITE_SPACE (' ')
identifier ('wsEndpoint')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE ('\n            ')
< ('<')
identifier ('http')
: (':')
identifier ('WebSocketCaller')
> ('>')
identifier ('ep')
. ('.')
identifier ('attributes')
[ ('[')
identifier ('ASSOCIATED_CONNECTION')
] (']')
; (';')
WHITE_SPACE ('\n    ')
return ('return')
WHITE_SPACE (' ')
identifier ('wsEndpoint')
; (';')
WHITE_SPACE ('\n')
} ('}')
