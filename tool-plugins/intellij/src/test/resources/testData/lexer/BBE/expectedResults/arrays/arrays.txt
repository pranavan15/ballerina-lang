import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
PUBLIC ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Create an `int` array of length 0.')
WHITE_SPACE ('\n    ')
int ('int')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('a')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
] (']')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('a')
. ('.')
identifier ('length')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Create an array specifying an array literal.')
WHITE_SPACE ('\n    ')
int ('int')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('b')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
DECIMAL_INTEGER_LITERAL ('1')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('2')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('3')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('4')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('5')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('6')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('7')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('8')
] (']')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('b')
[ ('[')
DECIMAL_INTEGER_LITERAL ('0')
] (']')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('b')
. ('.')
identifier ('length')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Arrays are unbounded in length. They can grow up to any length based on ')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// the given index. In this example, the length of the array is 1000.')
WHITE_SPACE ('\n    ')
identifier ('b')
[ ('[')
DECIMAL_INTEGER_LITERAL ('999')
] (']')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('23')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('b')
[ ('[')
DECIMAL_INTEGER_LITERAL ('999')
] (']')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('b')
. ('.')
identifier ('length')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Initialize a two dimensional `int` array.')
WHITE_SPACE ('\n    ')
int ('int')
[ ('[')
] (']')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('iarray')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
[ ('[')
DECIMAL_INTEGER_LITERAL ('1')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('2')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('3')
] (']')
, (',')
WHITE_SPACE (' ')
[ ('[')
DECIMAL_INTEGER_LITERAL ('10')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('20')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('30')
] (']')
, (',')
WHITE_SPACE (' ')
[ ('[')
DECIMAL_INTEGER_LITERAL ('5')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('6')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('7')
] (']')
] (']')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('iarray')
. ('.')
identifier ('length')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('iarray')
[ ('[')
DECIMAL_INTEGER_LITERAL ('0')
] (']')
. ('.')
identifier ('length')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Initialize the outermost array to an empty array.')
WHITE_SPACE ('\n    ')
identifier ('iarray')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
] (']')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Add a new array as the first element.')
WHITE_SPACE ('\n    ')
int ('int')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('d')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
DECIMAL_INTEGER_LITERAL ('9')
] (']')
; (';')
WHITE_SPACE ('\n    ')
identifier ('iarray')
[ ('[')
DECIMAL_INTEGER_LITERAL ('0')
] (']')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('d')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Print the first value of the two-dimensional array.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('iarray')
[ ('[')
DECIMAL_INTEGER_LITERAL ('0')
] (']')
[ ('[')
DECIMAL_INTEGER_LITERAL ('0')
] (']')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Create an `int` array with the fixed length of five.')
WHITE_SPACE ('\n    ')
int ('int')
[ ('[')
DECIMAL_INTEGER_LITERAL ('5')
] (']')
WHITE_SPACE (' ')
identifier ('e')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
DECIMAL_INTEGER_LITERAL ('1')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('2')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('3')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('4')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('5')
] (']')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('e')
. ('.')
identifier ('length')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// To infer the size of the array from the array literal, use the following syntax.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// The length of the array is set to four here.')
WHITE_SPACE ('\n    ')
int ('int')
[ ('[')
! ('!')
... ('...')
] (']')
WHITE_SPACE (' ')
identifier ('g')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
DECIMAL_INTEGER_LITERAL ('1')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('2')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('3')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('4')
] (']')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('g')
. ('.')
identifier ('length')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
