import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('http')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('log')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Create a new service endpoint to accept new connections')
WHITE_SPACE ('\n')
LINE_COMMENT ('//that are secured via mutual SSL.')
WHITE_SPACE ('\n')
identifier ('http')
: (':')
identifier ('ServiceEndpointConfiguration')
WHITE_SPACE (' ')
identifier ('helloWorldEPConfig')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n    ')
identifier ('secureSocket')
: (':')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('keyStore')
: (':')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('path')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"${ballerina.home}/bre/security/ballerinaKeystore.p12"')
, (',')
WHITE_SPACE ('\n            ')
identifier ('password')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"ballerina"')
WHITE_SPACE ('\n        ')
} ('}')
, (',')
WHITE_SPACE ('\n        ')
identifier ('trustStore')
: (':')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('path')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"${ballerina.home}/bre/security/ballerinaTruststore.p12"')
, (',')
WHITE_SPACE ('\n            ')
identifier ('password')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"ballerina"')
WHITE_SPACE ('\n        ')
} ('}')
, (',')
WHITE_SPACE ('\n         ')
LINE_COMMENT ('// Configure the preferred SSL protocol and the versions to enable.')
WHITE_SPACE ('\n        ')
identifier ('protocol')
: (':')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('name')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"TLS"')
, (',')
WHITE_SPACE ('\n            ')
identifier ('versions')
: (':')
WHITE_SPACE (' ')
[ ('[')
QUOTED_STRING_LITERAL ('"TLSv1.2"')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"TLSv1.1"')
] (']')
WHITE_SPACE ('\n        ')
} ('}')
, (',')
WHITE_SPACE ('\n\n         ')
LINE_COMMENT ('// Configure the preferred ciphers.')
WHITE_SPACE ('\n        ')
identifier ('ciphers')
: (':')
WHITE_SPACE (' ')
[ ('[')
QUOTED_STRING_LITERAL ('"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA"')
] (']')
, (',')
WHITE_SPACE ('\n\n         ')
LINE_COMMENT ('// Enable mutual SSL.')
WHITE_SPACE ('\n        ')
identifier ('sslVerifyClient')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"require"')
WHITE_SPACE ('\n\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Create a listener endpoint.')
WHITE_SPACE ('\n')
listener ('listener')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('Listener')
WHITE_SPACE (' ')
identifier ('helloWorldEP')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
( ('(')
DECIMAL_INTEGER_LITERAL ('9095')
, (',')
WHITE_SPACE (' ')
identifier ('config')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('helloWorldEPConfig')
) (')')
; (';')
WHITE_SPACE ('\n\n')
@ ('@')
identifier ('http')
: (':')
identifier ('ServiceConfig')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('basePath')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"/hello"')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Bind the service to the listener endpoint that you declared earlier.')
WHITE_SPACE ('\n')
service ('service')
WHITE_SPACE (' ')
identifier ('helloWorld')
WHITE_SPACE (' ')
on ('on')
WHITE_SPACE (' ')
identifier ('helloWorldEP')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
@ ('@')
identifier ('http')
: (':')
identifier ('ResourceConfig')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('methods')
: (':')
WHITE_SPACE (' ')
[ ('[')
QUOTED_STRING_LITERAL ('"GET"')
] (']')
, (',')
WHITE_SPACE ('\n        ')
identifier ('path')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"/"')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
resource ('resource')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('sayHello')
( ('(')
identifier ('http')
: (':')
identifier ('Caller')
WHITE_SPACE (' ')
identifier ('caller')
, (',')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('Request')
WHITE_SPACE (' ')
identifier ('req')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Send response to the caller.')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('caller')
-> ('->')
identifier ('respond')
( ('(')
QUOTED_STRING_LITERAL ('"Successful"')
) (')')
; (';')
WHITE_SPACE ('\n\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('result')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
error ('error')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error in responding"')
, (',')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('result')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Create a new client configuration to be passed to the client endpoint.')
WHITE_SPACE ('\n')
LINE_COMMENT ('// Configure the `keyStoreFile`, `keyStorePassword`, `trustStoreFile`, and')
WHITE_SPACE ('\n ')
LINE_COMMENT ('// `trustStorePassword` to enable mutual SSL.')
WHITE_SPACE ('\n')
identifier ('http')
: (':')
identifier ('ClientEndpointConfig')
WHITE_SPACE (' ')
identifier ('clientEPConfig')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('secureSocket')
: (':')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('keyStore')
: (':')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('path')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"${ballerina.home}/bre/security/ballerinaKeystore.p12"')
, (',')
WHITE_SPACE ('\n            ')
identifier ('password')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"ballerina"')
WHITE_SPACE ('\n        ')
} ('}')
, (',')
WHITE_SPACE ('\n        ')
identifier ('trustStore')
: (':')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('path')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"${ballerina.home}/bre/security/ballerinaTruststore.p12"')
, (',')
WHITE_SPACE ('\n            ')
identifier ('password')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"ballerina"')
WHITE_SPACE ('\n        ')
} ('}')
, (',')
WHITE_SPACE ('\n        ')
identifier ('protocol')
: (':')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('name')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"TLS"')
WHITE_SPACE ('\n        ')
} ('}')
, (',')
WHITE_SPACE ('\n        ')
identifier ('ciphers')
: (':')
WHITE_SPACE (' ')
[ ('[')
QUOTED_STRING_LITERAL ('"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA"')
] (']')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
PUBLIC ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Create an HTTP client to interact with the created listener endpoint.')
WHITE_SPACE ('\n    ')
identifier ('http')
: (':')
identifier ('Client')
WHITE_SPACE (' ')
identifier ('clientEP')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
( ('(')
QUOTED_STRING_LITERAL ('"https://localhost:9095"')
, (',')
WHITE_SPACE ('\n                                ')
identifier ('config')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('clientEPConfig')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Send a GET request to the listener.')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('resp')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('clientEP')
-> ('->')
identifier ('get')
( ('(')
QUOTED_STRING_LITERAL ('"/hello"')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('resp')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('Response')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// If the request is successful, retrieve the text payload from the')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// response.')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
identifier ('payload')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('resp')
. ('.')
identifier ('getTextPayload')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('payload')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
string ('string')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// Log the retrieved text paylod.')
WHITE_SPACE ('\n            ')
identifier ('log')
: (':')
identifier ('printInfo')
( ('(')
identifier ('payload')
) (')')
; (';')
WHITE_SPACE ('\n\n        ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// If an error occurs while retrieving the text payload, log')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// the error.')
WHITE_SPACE ('\n            ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
< ('<')
string ('string')
> ('>')
identifier ('payload')
. ('.')
identifier ('detail')
( ('(')
) (')')
. ('.')
identifier ('message')
) (')')
; (';')
WHITE_SPACE ('\n\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// If an error occurs when getting the response, log the error.')
WHITE_SPACE ('\n        ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
< ('<')
string ('string')
> ('>')
identifier ('resp')
. ('.')
identifier ('detail')
( ('(')
) (')')
. ('.')
identifier ('message')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
