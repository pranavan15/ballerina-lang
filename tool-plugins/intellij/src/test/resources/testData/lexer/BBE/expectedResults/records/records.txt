import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
type ('type')
WHITE_SPACE (' ')
identifier ('Student')
WHITE_SPACE (' ')
record ('record')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('name')
; (';')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('age')
; (';')
WHITE_SPACE ('\n    ')
identifier ('Grades')
WHITE_SPACE (' ')
identifier ('grades')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
... ('...')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
type ('type')
WHITE_SPACE (' ')
identifier ('Grades')
WHITE_SPACE (' ')
record ('record')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('maths')
; (';')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('physics')
; (';')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('chemistry')
; (';')
WHITE_SPACE ('\n    ')
! ('!')
... ('...')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
PUBLIC ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// This creates a `Student` record. Since all the fields are required and none of the fields')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// have explicit default values assigned to them, values must be specified for all the fields')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// when creating the record.')
WHITE_SPACE ('\n    ')
identifier ('Student')
WHITE_SPACE (' ')
identifier ('john')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
identifier ('name')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"John Doe"')
, (',')
WHITE_SPACE (' ')
identifier ('age')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('17')
, (',')
WHITE_SPACE ('\n                    ')
identifier ('grades')
: (':')
WHITE_SPACE (' ')
{ ('{')
identifier ('maths')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('80')
, (',')
WHITE_SPACE (' ')
identifier ('physics')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('75')
, (',')
WHITE_SPACE (' ')
identifier ('chemistry')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('65')
} ('}')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('john')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// This is an example of field-based access of record fields. The return type of this expression is the')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// type of the field. If it is an open record and the specified key is not present in the record at run time,')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// it will result in a panic. If it is a closed record, accessing an undefined key will result in a compilation error.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('john')
. ('.')
identifier ('name')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// This is an example of index-based access of record fields. The return type of this expression is `T?`, where')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// `T` is the type of the field. If it is an open record and the specified key is not present in the record at run time,')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// `()` will be returned. If it is a closed record, accessing an undefined key will result in a compilation error.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('john')
[ ('[')
QUOTED_STRING_LITERAL ('"name"')
] (']')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// This fetches a field of a nested record.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('john')
. ('.')
identifier ('grades')
. ('.')
identifier ('maths')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
identifier ('Student')
WHITE_SPACE (' ')
identifier ('peter')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
identifier ('name')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Peter"')
, (',')
WHITE_SPACE (' ')
identifier ('age')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('19')
, (',')
WHITE_SPACE ('\n                     ')
identifier ('grades')
: (':')
WHITE_SPACE (' ')
{ ('{')
identifier ('maths')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('40')
, (',')
WHITE_SPACE (' ')
identifier ('physics')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('35')
, (',')
WHITE_SPACE (' ')
identifier ('chemistry')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('35')
} ('}')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// This modifies the value of the `age` field.')
WHITE_SPACE ('\n    ')
identifier ('peter')
. ('.')
identifier ('age')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('16')
; (';')
WHITE_SPACE ('\n\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('peter')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('john')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// This adds an additional field not defined in the record type descriptor above.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Note that an attempt to add additional fields to a closed record results in compile errors.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// e.g., `peter.grades.ict = 77;` will result in a compile error.')
WHITE_SPACE ('\n    ')
identifier ('peter')
. ('.')
identifier ('department')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Computer Science"')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('peter')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
