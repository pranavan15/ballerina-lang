import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
type ('type')
WHITE_SPACE (' ')
identifier ('Person')
WHITE_SPACE (' ')
record ('record')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('name')
; (';')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('age')
; (';')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
type ('type')
WHITE_SPACE (' ')
identifier ('Employee')
WHITE_SPACE (' ')
record ('record')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('name')
; (';')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('age')
; (';')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('empNo')
; (';')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Function to attempt converting an `anydata` record `Employee`, to an `anydata` record `Person`.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('convertEmployeeToPerson')
( ('(')
identifier ('Employee')
WHITE_SPACE (' ')
identifier ('emp')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Attempt creating a new value of type `Person` from the `Employee` typed `emp` value, without changing `emp`'s')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// inherent type.')
WHITE_SPACE ('\n    ')
identifier ('Person')
| ('|')
error ('error')
WHITE_SPACE (' ')
identifier ('res')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('Person')
. ('.')
identifier ('convert')
( ('(')
identifier ('emp')
) (')')
; (';')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('res')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
identifier ('Person')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// If the conversion is successful, print the `name` field.')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Employee to Person, name: "')
, (',')
WHITE_SPACE (' ')
identifier ('res')
[ ('[')
QUOTED_STRING_LITERAL ('"name"')
] (']')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Error occurred on conversion"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Function to attempt converting an `any` constrained map, to an `anydata` record `Person`.')
WHITE_SPACE ('\n')
LINE_COMMENT ('// The conversion would return an error if non-`anydata` or an incompatible value is found.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('convertAnyMapToPerson')
( ('(')
map ('map')
< ('<')
any ('any')
> ('>')
WHITE_SPACE (' ')
identifier ('m')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Attempt creating a new value of type `Person` from the `map<any>` typed `m` value, without changing `m`'s')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// inherent type.')
WHITE_SPACE ('\n    ')
identifier ('Person')
| ('|')
error ('error')
WHITE_SPACE (' ')
identifier ('res')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('Person')
. ('.')
identifier ('convert')
( ('(')
identifier ('m')
) (')')
; (';')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('res')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
identifier ('Person')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// If the conversion is successful, print the `name` field.')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"map<any> to Person, name: "')
, (',')
WHITE_SPACE (' ')
identifier ('res')
[ ('[')
QUOTED_STRING_LITERAL ('"name"')
] (']')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Error occurred on conversion"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Function to convert simple basic types using the `.convert()` built-in method.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('convertSimpleBasicTypes')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('s1')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"45"')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('s2')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"abc"')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('s3')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"true"')
; (';')
WHITE_SPACE ('\n    ')
float ('float')
WHITE_SPACE (' ')
identifier ('f')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_FLOATING_POINT_NUMBER ('10.2')
; (';')
WHITE_SPACE ('\n    ')
any ('any')
WHITE_SPACE (' ')
identifier ('a')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_FLOATING_POINT_NUMBER ('3.14')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// `string` to `int` conversion is unsafe, since the `string` value may not be convertible to `int`.')
WHITE_SPACE ('\n    ')
int ('int')
| ('|')
error ('error')
WHITE_SPACE (' ')
identifier ('res1')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
int ('int')
. ('.')
identifier ('convert')
( ('(')
identifier ('s1')
) (')')
; (';')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('res1')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
int ('int')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"int value: "')
, (',')
WHITE_SPACE (' ')
identifier ('res1')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"error: "')
, (',')
WHITE_SPACE (' ')
identifier ('res1')
. ('.')
identifier ('detail')
( ('(')
) (')')
. ('.')
identifier ('message')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
identifier ('res1')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
int ('int')
. ('.')
identifier ('convert')
( ('(')
identifier ('s2')
) (')')
; (';')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('res1')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
int ('int')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"int value: "')
, (',')
WHITE_SPACE (' ')
identifier ('res1')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"error: "')
, (',')
WHITE_SPACE (' ')
identifier ('res1')
. ('.')
identifier ('detail')
( ('(')
) (')')
. ('.')
identifier ('message')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// A `float` to `int` conversion can result in some of the information getting lost.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// However, this conversion is always safe since there is a corresponding `int` representation')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// for all `float` values except for `NaN` or `infinite` float values, in which case the')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// the conversion attempt will result in a panic.')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('intVal')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
int ('int')
. ('.')
identifier ('convert')
( ('(')
identifier ('f')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"int value: "')
, (',')
WHITE_SPACE (' ')
identifier ('intVal')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// A `string` to `boolean` conversion is always safe. The `string` value `true` (ignoring case)')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// evaluates to the `boolean` value `true`, while any other `string` is converted to the')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// `boolean` value `false`.')
WHITE_SPACE ('\n    ')
boolean ('boolean')
WHITE_SPACE (' ')
identifier ('b')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
boolean ('boolean')
. ('.')
identifier ('convert')
( ('(')
identifier ('s3')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"boolean value: "')
, (',')
WHITE_SPACE (' ')
identifier ('b')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// A simple basic typed value held in an `any` typed variable can also be converted to its inherent')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// type using the `.convert()` method. This attempt is unsafe, since the value may not be compatible')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// with the target type.')
WHITE_SPACE ('\n    ')
float ('float')
| ('|')
error ('error')
WHITE_SPACE (' ')
identifier ('res2')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
float ('float')
. ('.')
identifier ('convert')
( ('(')
identifier ('a')
) (')')
; (';')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('res2')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
float ('float')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"float value: "')
, (',')
WHITE_SPACE (' ')
identifier ('res2')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"error: "')
, (',')
WHITE_SPACE (' ')
identifier ('res2')
. ('.')
identifier ('detail')
( ('(')
) (')')
. ('.')
identifier ('message')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
PUBLIC ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Attempt converting an `anydata` typed record to another `anydata` typed record.')
WHITE_SPACE ('\n    ')
identifier ('Employee')
WHITE_SPACE (' ')
identifier ('emp')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('name')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Jack Sparrow"')
, (',')
WHITE_SPACE (' ')
identifier ('age')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('54')
, (',')
WHITE_SPACE (' ')
identifier ('empNo')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('100')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
identifier ('convertEmployeeToPerson')
( ('(')
identifier ('emp')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Attempt converting an `any` constrained map to an `anydata` typed record.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// This conversion would be successful since all the expected elements are present')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// and no non-`anydata` elements are added to the map.')
WHITE_SPACE ('\n    ')
map ('map')
< ('<')
any ('any')
> ('>')
WHITE_SPACE (' ')
identifier ('m')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('name')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Jack Sparrow"')
, (',')
WHITE_SPACE (' ')
identifier ('age')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('54')
, (',')
WHITE_SPACE (' ')
identifier ('empNo')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('100')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
identifier ('convertAnyMapToPerson')
( ('(')
identifier ('m')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Add a non-`anydata` element (e.g., `typedesc`) to the map and re-attempt conversion.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// The conversion attempt would now return an error.')
WHITE_SPACE ('\n    ')
identifier ('m')
[ ('[')
QUOTED_STRING_LITERAL ('"name"')
] (']')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
int ('int')
; (';')
WHITE_SPACE ('\n    ')
identifier ('convertAnyMapToPerson')
( ('(')
identifier ('m')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Attempt converting to/from simple basic types.')
WHITE_SPACE ('\n    ')
identifier ('convertSimpleBasicTypes')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
