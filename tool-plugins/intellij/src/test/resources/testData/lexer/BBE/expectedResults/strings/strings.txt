import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('internal')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
PUBLIC ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('statement')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Lion in Town. Catch the Lion"')
; (';')
WHITE_SPACE ('\n\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('s1')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('statement')
. ('.')
identifier ('toUpper')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"ToUpper: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('s1')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('s2')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('statement')
. ('.')
identifier ('toLower')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"ToLower: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('s2')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Compare two strings ignoring the case.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Returns `true` if the strings are equal, or `false` if they are not equal.')
WHITE_SPACE ('\n    ')
boolean ('boolean')
WHITE_SPACE (' ')
identifier ('isEqual')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE ('\n            ')
identifier ('statement')
. ('.')
identifier ('equalsIgnoreCase')
( ('(')
QUOTED_STRING_LITERAL ('"lion in town. catch the lion"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"EqualsIgnoreCase: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('isEqual')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Create a new string that is a substring of the specified string. You must provide the original string,')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('//and the starting and ending indexes of the substring.')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('s3')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('statement')
. ('.')
identifier ('substring')
( ('(')
DECIMAL_INTEGER_LITERAL ('0')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('4')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"SubString: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('s3')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Check if the `statement` string contains the string "Lion".')
WHITE_SPACE ('\n    ')
boolean ('boolean')
WHITE_SPACE (' ')
identifier ('contains')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('statement')
. ('.')
identifier ('contains')
( ('(')
QUOTED_STRING_LITERAL ('"Lion"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Contains: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('contains')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Retrieve the starting index of the first occurrence of the substring "on" within the `statement` string.')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('index')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('statement')
. ('.')
identifier ('indexOf')
( ('(')
QUOTED_STRING_LITERAL ('"on"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"IndexOf: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('index')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Retrieve the starting index of the last occurrence of the substring "on" within the `statement` string.')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('lastIndex')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('statement')
. ('.')
identifier ('lastIndexOf')
( ('(')
QUOTED_STRING_LITERAL ('"on"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"LastIndexOf: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('lastIndex')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Replace the first instance of the string "Lion" in the `statement` string, with the string "Tiger".')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('s5')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('statement')
. ('.')
identifier ('replaceFirst')
( ('(')
QUOTED_STRING_LITERAL ('"Lion"')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Tiger"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"ReplaceFirst: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('s5')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Replace the string "Lion" in the `statement` string, with the string "Tiger".')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('s6')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('statement')
. ('.')
identifier ('replace')
( ('(')
QUOTED_STRING_LITERAL ('"Lion"')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Tiger"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Replace: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('s6')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Replace each substring of the `statement` string that matches the given')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// regular expression with the replacement string "0".')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('s7')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('statement')
. ('.')
identifier ('replaceAll')
( ('(')
QUOTED_STRING_LITERAL ('"[o]+"')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"0"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"ReplaceAll: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('s7')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Retrieve the length of the string.')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('length')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('statement')
. ('.')
identifier ('length')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Length: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('length')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Remove any leading and trailing white spaces.')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('s8')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('statement')
. ('.')
identifier ('trim')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Trim: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('s8')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Check whether the given string ends with the suffix "Lion".')
WHITE_SPACE ('\n    ')
boolean ('boolean')
WHITE_SPACE (' ')
identifier ('hasSuffix')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('statement')
. ('.')
identifier ('hasSuffix')
( ('(')
QUOTED_STRING_LITERAL ('"Lion"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"HasSuffix: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('hasSuffix')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Check whether the given string starts with the prefix "Lion".')
WHITE_SPACE ('\n    ')
boolean ('boolean')
WHITE_SPACE (' ')
identifier ('hasPrefix')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('statement')
. ('.')
identifier ('hasPrefix')
( ('(')
QUOTED_STRING_LITERAL ('"Lion"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"HasPrefix: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('hasPrefix')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Retrieve an unescaped string by omitting the escape characters of the original string.')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('s9')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('statement')
. ('.')
identifier ('unescape')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Unescape: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('s9')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Split the string based on the given regular expression to produce a string array.')
WHITE_SPACE ('\n    ')
string ('string')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('array')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('statement')
. ('.')
identifier ('split')
( ('(')
QUOTED_STRING_LITERAL ('" "')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Split: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('array')
[ ('[')
DECIMAL_INTEGER_LITERAL ('0')
] (']')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Split: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('array')
[ ('[')
DECIMAL_INTEGER_LITERAL ('1')
] (']')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Split: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('array')
[ ('[')
DECIMAL_INTEGER_LITERAL ('2')
] (']')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Convert the string to a byte array.')
WHITE_SPACE ('\n    ')
byte ('byte')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('bytes')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('statement')
. ('.')
identifier ('toByteArray')
( ('(')
QUOTED_STRING_LITERAL ('"UTF-8"')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Convert a byte array to a string.')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('s10')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('internal')
: (':')
identifier ('byteArrayToString')
( ('(')
identifier ('bytes')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"UTF-8"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Bytes: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('s10')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Format a string according to the given format arguments.')
WHITE_SPACE ('\n    ')
float ('float')
WHITE_SPACE (' ')
identifier ('value')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_FLOATING_POINT_NUMBER ('5.8')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('s11')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('sprintf')
( ('(')
QUOTED_STRING_LITERAL ('"%s %f"')
, (',')
WHITE_SPACE (' ')
identifier ('array')
[ ('[')
DECIMAL_INTEGER_LITERAL ('0')
] (']')
, (',')
WHITE_SPACE (' ')
identifier ('value')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Sprintf: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('s11')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
