import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('runtime')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Workers interact with each other by sending and receiving messages. ')
WHITE_SPACE ('\n')
LINE_COMMENT ('// Ballerina validates every worker interactions (send and receive) in order to')
WHITE_SPACE ('\n')
LINE_COMMENT ('// avoid deadlocks.')
WHITE_SPACE ('\n')
PUBLIC ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
worker ('worker')
WHITE_SPACE (' ')
identifier ('w1')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
int ('int')
WHITE_SPACE (' ')
identifier ('i')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('100')
; (';')
WHITE_SPACE ('\n        ')
float ('float')
WHITE_SPACE (' ')
identifier ('k')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_FLOATING_POINT_NUMBER ('2.34')
; (';')
WHITE_SPACE ('\n\n        ')
LINE_COMMENT ('// Send messages asynchronously to worker `w2`. This message contains a')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// tuple value with member types of `int` and `float`.')
WHITE_SPACE ('\n        ')
( ('(')
identifier ('i')
, (',')
WHITE_SPACE (' ')
identifier ('k')
) (')')
WHITE_SPACE (' ')
-> ('->')
WHITE_SPACE (' ')
identifier ('w2')
; (';')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"[w1 -> w2] i: "')
, (',')
WHITE_SPACE (' ')
identifier ('i')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" k: "')
, (',')
WHITE_SPACE (' ')
identifier ('k')
) (')')
; (';')
WHITE_SPACE ('\n\n        ')
LINE_COMMENT ('// Receive a message from worker `w2`. This message contains a `json`')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// typed value.')
WHITE_SPACE ('\n        ')
json ('json')
WHITE_SPACE (' ')
identifier ('j')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
} ('}')
; (';')
WHITE_SPACE ('\n        ')
identifier ('j')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
<- ('<-')
WHITE_SPACE (' ')
identifier ('w2')
; (';')
WHITE_SPACE ('\n        ')
string ('string')
WHITE_SPACE (' ')
identifier ('jStr')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('j')
. ('.')
identifier ('toString')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"[w1 <- w2] j: "')
, (',')
WHITE_SPACE (' ')
identifier ('jStr')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"[w1 ->> w2] i: "')
, (',')
WHITE_SPACE (' ')
identifier ('i')
) (')')
; (';')
WHITE_SPACE ('\n\n        ')
LINE_COMMENT ('// Send messages synchronously to worker `w2`. Worker `w1` will wait')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// until worker `w2` receives the message.')
WHITE_SPACE ('\n        ')
( ('(')
) (')')
WHITE_SPACE (' ')
identifier ('send')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('i')
WHITE_SPACE (' ')
SYNCRARROW ('->>')
WHITE_SPACE (' ')
identifier ('w2')
; (';')
WHITE_SPACE ('\n\n        ')
LINE_COMMENT ('// Synchronous send returns nil if the message is sent successfully or')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// returns an error or panics based on the receiving worker's state.')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"[w1 ->> w2] successful!!"')
) (')')
; (';')
WHITE_SPACE ('\n\n        ')
LINE_COMMENT ('// Send messages asynchronously to worker `w3`.')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"[w1 -> w3] k: "')
, (',')
WHITE_SPACE (' ')
identifier ('k')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('k')
WHITE_SPACE (' ')
-> ('->')
WHITE_SPACE (' ')
identifier ('w3')
; (';')
WHITE_SPACE ('\n        ')
identifier ('k')
WHITE_SPACE (' ')
-> ('->')
WHITE_SPACE (' ')
identifier ('w3')
; (';')
WHITE_SPACE ('\n        ')
identifier ('k')
WHITE_SPACE (' ')
-> ('->')
WHITE_SPACE (' ')
identifier ('w3')
; (';')
WHITE_SPACE ('\n\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Waiting for worker w3 to fetch messages.."')
) (')')
; (';')
WHITE_SPACE ('\n\n        ')
LINE_COMMENT ('// Flush all messages sent asynchronously to worker `w3`. The worker')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// will halt here until all messages are sent or until worker `w3`')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// fails.')
WHITE_SPACE ('\n        ')
error ('error')
? ('?')
WHITE_SPACE (' ')
identifier ('flushResult')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
flush ('flush')
WHITE_SPACE (' ')
identifier ('w3')
; (';')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"[w1 -> w3] Flushed!!"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
worker ('worker')
WHITE_SPACE (' ')
identifier ('w2')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Receive a message from worker `w1`.')
WHITE_SPACE ('\n        ')
int ('int')
WHITE_SPACE (' ')
identifier ('iw')
; (';')
WHITE_SPACE ('\n        ')
float ('float')
WHITE_SPACE (' ')
identifier ('kw')
; (';')
WHITE_SPACE ('\n        ')
( ('(')
int ('int')
, (',')
WHITE_SPACE (' ')
float ('float')
) (')')
WHITE_SPACE (' ')
identifier ('vW1')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
( ('(')
DECIMAL_INTEGER_LITERAL ('0')
, (',')
WHITE_SPACE (' ')
DECIMAL_FLOATING_POINT_NUMBER ('1.0')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('vW1')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
<- ('<-')
WHITE_SPACE (' ')
identifier ('w1')
; (';')
WHITE_SPACE ('\n        ')
( ('(')
identifier ('iw')
, (',')
WHITE_SPACE (' ')
identifier ('kw')
) (')')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('vW1')
; (';')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"[w2 <- w1] iw: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('iw')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" kw: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('kw')
) (')')
; (';')
WHITE_SPACE ('\n\n        ')
LINE_COMMENT ('// Send a message asynchronously to worker `w1`.')
WHITE_SPACE ('\n        ')
json ('json')
WHITE_SPACE (' ')
identifier ('jw')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"name"')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Ballerina"')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"[w2 -> w1] jw: "')
, (',')
WHITE_SPACE (' ')
identifier ('jw')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('jw')
WHITE_SPACE (' ')
-> ('->')
WHITE_SPACE (' ')
identifier ('w1')
; (';')
WHITE_SPACE ('\n\n        ')
LINE_COMMENT ('// Receive the message sent synchronously from the worker `w1`')
WHITE_SPACE ('\n        ')
int ('int')
WHITE_SPACE (' ')
identifier ('lw')
; (';')
WHITE_SPACE ('\n        ')
identifier ('runtime')
: (':')
identifier ('sleep')
( ('(')
DECIMAL_INTEGER_LITERAL ('5')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('lw')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
<- ('<-')
WHITE_SPACE (' ')
identifier ('w1')
; (';')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"[w2 <- w1] lw: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('lw')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
worker ('worker')
WHITE_SPACE (' ')
identifier ('w3')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
float ('float')
WHITE_SPACE (' ')
identifier ('mw')
; (';')
WHITE_SPACE ('\n\n        ')
LINE_COMMENT ('// Receive messages from worker `w1` after a certain time.')
WHITE_SPACE ('\n        ')
identifier ('runtime')
: (':')
identifier ('sleep')
( ('(')
DECIMAL_INTEGER_LITERAL ('50')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('mw')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
<- ('<-')
WHITE_SPACE (' ')
identifier ('w1')
; (';')
WHITE_SPACE ('\n        ')
identifier ('mw')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
<- ('<-')
WHITE_SPACE (' ')
identifier ('w1')
; (';')
WHITE_SPACE ('\n        ')
identifier ('mw')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
<- ('<-')
WHITE_SPACE (' ')
identifier ('w1')
; (';')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"[w3 <- w1] mw: "')
, (',')
WHITE_SPACE (' ')
identifier ('mw')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Wait for worker `w1`to finish.')
WHITE_SPACE ('\n    ')
wait ('wait')
WHITE_SPACE (' ')
identifier ('w1')
; (';')
WHITE_SPACE ('\n')
} ('}')
