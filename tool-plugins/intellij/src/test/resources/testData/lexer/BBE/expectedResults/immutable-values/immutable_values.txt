import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Define a `Department` record that only has `anydata` typed fields')
WHITE_SPACE ('\n')
type ('type')
WHITE_SPACE (' ')
identifier ('Department')
WHITE_SPACE (' ')
record ('record')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('name')
; (';')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('id')
; (';')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Define an `Employee` object')
WHITE_SPACE ('\n')
type ('type')
WHITE_SPACE (' ')
identifier ('Employee')
WHITE_SPACE (' ')
object ('object')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('name')
; (';')
WHITE_SPACE ('\n\n    ')
function ('function')
WHITE_SPACE (' ')
OBJECT_INIT ('__init')
( ('(')
string ('string')
WHITE_SPACE (' ')
identifier ('name')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('self')
. ('.')
identifier ('name')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('name')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
function ('function')
WHITE_SPACE (' ')
identifier ('getName')
( ('(')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
string ('string')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
return ('return')
WHITE_SPACE (' ')
identifier ('self')
. ('.')
identifier ('name')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
PUBLIC ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Create an `anydata` typed `map` with two entries.')
WHITE_SPACE ('\n    ')
map ('map')
< ('<')
string ('string')
| ('|')
int ('int')
> ('>')
WHITE_SPACE (' ')
identifier ('m1')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('stringVal')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"str"')
, (',')
WHITE_SPACE (' ')
identifier ('intVal')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Freeze the map `m1` and assign the returned value to another variable.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Since the map is of type `anydata`, the return value would be of the same type as `m1`.')
WHITE_SPACE ('\n    ')
map ('map')
< ('<')
string ('string')
| ('|')
int ('int')
> ('>')
WHITE_SPACE (' ')
identifier ('m2')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('m1')
. ('.')
identifier ('freeze')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Reference equality checks for `m1` and `m2` should evaluate to true, since the same value is returned with the')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// frozen flag set.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"m1 === m2: "')
, (',')
WHITE_SPACE (' ')
identifier ('m1')
WHITE_SPACE (' ')
=== ('===')
WHITE_SPACE (' ')
identifier ('m2')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Check if `m1` is frozen.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Frozen status of m1: "')
, (',')
WHITE_SPACE (' ')
identifier ('m1')
. ('.')
identifier ('isFrozen')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Attempt adding an entry to the map, and trap the error if an error occurs.')
WHITE_SPACE ('\n    ')
error ('error')
? ('?')
WHITE_SPACE (' ')
identifier ('updateResult')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
trap ('trap')
WHITE_SPACE (' ')
identifier ('addEntryToMap')
( ('(')
identifier ('m2')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"intValTwo"')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('10')
) (')')
; (';')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('updateResult')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
error ('error')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// An error should occur since `m2` is frozen')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Error occurred on update: "')
, (',')
WHITE_SPACE ('\n                   ')
< ('<')
string ('string')
> ('>')
identifier ('updateResult')
. ('.')
identifier ('detail')
( ('(')
) (')')
. ('.')
identifier ('message')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Create a `Department` record.')
WHITE_SPACE ('\n    ')
identifier ('Department')
WHITE_SPACE (' ')
identifier ('d')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('name')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"finance"')
, (',')
WHITE_SPACE (' ')
identifier ('id')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1100')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Create a map that may hold `anydata` typed values.')
WHITE_SPACE ('\n    ')
map ('map')
< ('<')
any ('any')
> ('>')
WHITE_SPACE (' ')
identifier ('m3')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('stringVal')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"str"')
, (',')
WHITE_SPACE (' ')
identifier ('intVal')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1')
, (',')
WHITE_SPACE (' ')
identifier ('recVal')
: (':')
WHITE_SPACE (' ')
identifier ('d')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Attempt freezing `m3`. Note how the return type could now be an error, since there is the possibility that a')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// `map` constrained by type `any` could have `non-anydata` values.')
WHITE_SPACE ('\n    ')
map ('map')
< ('<')
any ('any')
> ('>')
| ('|')
error ('error')
WHITE_SPACE (' ')
identifier ('freezeResult')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('m3')
. ('.')
identifier ('freeze')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('freezeResult')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
error ('error')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"'.freeze()' failed for m3: "')
, (',')
WHITE_SPACE ('\n                   ')
< ('<')
string ('string')
> ('>')
identifier ('freezeResult')
. ('.')
identifier ('detail')
( ('(')
) (')')
. ('.')
identifier ('message')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"'.freeze()' successful for m3"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Create an `Employee` object.')
WHITE_SPACE ('\n    ')
identifier ('Employee')
WHITE_SPACE (' ')
identifier ('e')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
( ('(')
QUOTED_STRING_LITERAL ('"Anne"')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Now, create a map that may hold `anydata` values, and add the `non-anydata` object `Employee` too.')
WHITE_SPACE ('\n    ')
map ('map')
< ('<')
any ('any')
> ('>')
WHITE_SPACE (' ')
identifier ('m4')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('stringVal')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"str"')
, (',')
WHITE_SPACE (' ')
identifier ('intVal')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1')
, (',')
WHITE_SPACE (' ')
identifier ('objVal')
: (':')
WHITE_SPACE (' ')
identifier ('e')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Attempt freezing `m4`.')
WHITE_SPACE ('\n    ')
identifier ('freezeResult')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('m4')
. ('.')
identifier ('freeze')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('freezeResult')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
error ('error')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"'.freeze()' failed for m4: "')
, (',')
WHITE_SPACE ('\n                   ')
< ('<')
string ('string')
> ('>')
identifier ('freezeResult')
. ('.')
identifier ('detail')
( ('(')
) (')')
. ('.')
identifier ('message')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"'.freeze()' successful for m4"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Function to add an entry to a map.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('addEntryToMap')
( ('(')
map ('map')
< ('<')
string ('string')
| ('|')
int ('int')
> ('>')
WHITE_SPACE (' ')
identifier ('m')
, (',')
WHITE_SPACE (' ')
string ('string')
WHITE_SPACE (' ')
identifier ('key')
, (',')
WHITE_SPACE (' ')
string ('string')
| ('|')
int ('int')
WHITE_SPACE (' ')
identifier ('value')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('m')
[ ('[')
identifier ('key')
] (']')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('value')
; (';')
WHITE_SPACE ('\n')
} ('}')
