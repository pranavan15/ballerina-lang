import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('h2')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Create an endpoint for the first database named testdb1. Since this endpoint')
WHITE_SPACE ('\n')
LINE_COMMENT ('// participates in a distributed transaction, the `isXA` property should be true.')
WHITE_SPACE ('\n')
identifier ('h2')
: (':')
identifier ('Client')
WHITE_SPACE (' ')
identifier ('testDB1')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
( ('(')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('path')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"./xa-transactions/"')
, (',')
WHITE_SPACE ('\n    ')
identifier ('name')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Testdb1"')
, (',')
WHITE_SPACE ('\n    ')
identifier ('username')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"test"')
, (',')
WHITE_SPACE ('\n    ')
identifier ('password')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"test"')
, (',')
WHITE_SPACE ('\n    ')
identifier ('poolOptions')
: (':')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('maximumPoolSize')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('5')
, (',')
WHITE_SPACE (' ')
identifier ('isXA')
: (':')
WHITE_SPACE (' ')
BOOLEAN_LITERAL ('true')
WHITE_SPACE (' ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
) (')')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Create an endpoint for the second database named testdb2. Since this endpoint')
WHITE_SPACE ('\n')
LINE_COMMENT ('// participates in a distributed transaction, the `isXA` property should be true.')
WHITE_SPACE ('\n')
identifier ('h2')
: (':')
identifier ('Client')
WHITE_SPACE (' ')
identifier ('testDB2')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
( ('(')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('path')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"./xa-transactions/"')
, (',')
WHITE_SPACE ('\n    ')
identifier ('name')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Testdb2"')
, (',')
WHITE_SPACE ('\n    ')
identifier ('username')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"test"')
, (',')
WHITE_SPACE ('\n    ')
identifier ('password')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"test"')
, (',')
WHITE_SPACE ('\n    ')
identifier ('poolOptions')
: (':')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('maximumPoolSize')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('5')
, (',')
WHITE_SPACE (' ')
identifier ('isXA')
: (':')
WHITE_SPACE (' ')
BOOLEAN_LITERAL ('true')
WHITE_SPACE (' ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
) (')')
; (';')
WHITE_SPACE ('\n\n')
PUBLIC ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Create the table named CUSTOMER in the first database.')
WHITE_SPACE ('\n    ')
var ('var')
WHITE_SPACE (' ')
identifier ('ret')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('testDB1')
-> ('->')
identifier ('update')
( ('(')
QUOTED_STRING_LITERAL ('"CREATE TABLE CUSTOMER (ID INTEGER\n                    AUTO_INCREMENT, NAME VARCHAR(30))"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('handleUpdate')
( ('(')
identifier ('ret')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Create CUSTOMER table"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Create the table named SALARY in the second database.')
WHITE_SPACE ('\n    ')
identifier ('ret')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('testDB2')
-> ('->')
identifier ('update')
( ('(')
QUOTED_STRING_LITERAL ('"CREATE TABLE SALARY (ID INT, VALUE FLOAT)"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('handleUpdate')
( ('(')
identifier ('ret')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Create SALARY table"')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Begins the transaction.')
WHITE_SPACE ('\n    ')
transaction ('transaction')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// This is the first remote function to participate in the transaction. It inserts')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// customer name to the first DB and gets the generated key.')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('testDB1')
-> ('->')
identifier ('updateWithGeneratedKeys')
( ('(')
QUOTED_STRING_LITERAL ('"INSERT INTO\n                                CUSTOMER(NAME) VALUES ('Anne')"')
, (',')
WHITE_SPACE (' ')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n        ')
string ('string')
WHITE_SPACE (' ')
identifier ('generatedKey')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('""')
; (';')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('result')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
( ('(')
int ('int')
, (',')
WHITE_SPACE (' ')
string ('string')
[ ('[')
] (']')
) (')')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
var ('var')
WHITE_SPACE (' ')
( ('(')
identifier ('count')
, (',')
WHITE_SPACE (' ')
identifier ('ids')
) (')')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('result')
; (';')
WHITE_SPACE ('\n            ')
identifier ('generatedKey')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('ids')
[ ('[')
DECIMAL_INTEGER_LITERAL ('0')
] (']')
; (';')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Inserted row count: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('count')
) (')')
; (';')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Generated key: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('generatedKey')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Insert to student table failed: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('result')
. ('.')
identifier ('reason')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n\n        ')
LINE_COMMENT ('//Converte the returned key into integer.')
WHITE_SPACE ('\n        ')
identifier ('ret')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
int ('int')
. ('.')
identifier ('convert')
( ('(')
identifier ('generatedKey')
) (')')
; (';')
WHITE_SPACE ('\n        ')
int ('int')
WHITE_SPACE (' ')
identifier ('key')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
- ('-')
DECIMAL_INTEGER_LITERAL ('1')
; (';')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('ret')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
int ('int')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('key')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('ret')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Converting key to string failed: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('ret')
. ('.')
identifier ('reason')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Generated key for the inserted row: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('key')
) (')')
; (';')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// This is the second remote function to participate in the transaction. It inserts the')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// salary info to the second DB along with the key generated in the first DB.')
WHITE_SPACE ('\n        ')
identifier ('ret')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('testDB2')
-> ('->')
identifier ('update')
( ('(')
QUOTED_STRING_LITERAL ('"INSERT INTO SALARY (ID, VALUE) VALUES (?, ?)"')
, (',')
WHITE_SPACE ('\n                                    ')
identifier ('key')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('2500')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('handleUpdate')
( ('(')
identifier ('ret')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Insert to SALARY table"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
onretry ('onretry')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Retrying transaction"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
committed ('committed')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Transaction committed"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
aborted ('aborted')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Transaction aborted"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Drop the tables created for this sample.')
WHITE_SPACE ('\n    ')
identifier ('ret')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('testDB1')
-> ('->')
identifier ('update')
( ('(')
QUOTED_STRING_LITERAL ('"DROP TABLE CUSTOMER"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('handleUpdate')
( ('(')
identifier ('ret')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Drop Table CUSTOMER"')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
identifier ('ret')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('testDB2')
-> ('->')
identifier ('update')
( ('(')
QUOTED_STRING_LITERAL ('"DROP TABLE SALARY"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('handleUpdate')
( ('(')
identifier ('ret')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Drop Table SALARY"')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Close the connection pool.')
WHITE_SPACE ('\n    ')
identifier ('testDB1')
. ('.')
identifier ('stop')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('testDB2')
. ('.')
identifier ('stop')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('onCommitFunction')
( ('(')
string ('string')
WHITE_SPACE (' ')
identifier ('transactionId')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Transaction: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('transactionId')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" committed"')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('onAbortFunction')
( ('(')
string ('string')
WHITE_SPACE (' ')
identifier ('transactionId')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Transaction: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('transactionId')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" aborted"')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Function to handle return of the update operation.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('handleUpdate')
( ('(')
int ('int')
| ('|')
error ('error')
WHITE_SPACE (' ')
identifier ('returned')
, (',')
WHITE_SPACE (' ')
string ('string')
WHITE_SPACE (' ')
identifier ('message')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('returned')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
int ('int')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('message')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" status: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('returned')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('message')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" failed: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('returned')
. ('.')
identifier ('reason')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
