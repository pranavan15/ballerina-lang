import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
PUBLIC ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Iterating over a string array :"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('fruits')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
[ ('[')
QUOTED_STRING_LITERAL ('"apple"')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"banana"')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"cherry"')
] (']')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Foreach statement can be used to iterate over an array. Each iteration returns an element in the array. Note')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// that the index of the corresponding element is not returned.')
WHITE_SPACE ('\n    ')
foreach ('foreach')
WHITE_SPACE (' ')
var ('var')
WHITE_SPACE (' ')
identifier ('v')
WHITE_SPACE (' ')
in ('in')
WHITE_SPACE (' ')
identifier ('fruits')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"fruit: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('v')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"\nIterating over a map :"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
map ('map')
< ('<')
string ('string')
> ('>')
WHITE_SPACE (' ')
identifier ('words')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('a')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"apple"')
, (',')
WHITE_SPACE (' ')
identifier ('b')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"banana"')
, (',')
WHITE_SPACE (' ')
identifier ('c')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"cherry"')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Iterating over a `map` will return the key (`string`) and the value as a `tuple` variable.')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// We can use tuple destructuring to split the tuple variable in to two variables.')
WHITE_SPACE ('\n    ')
foreach ('foreach')
WHITE_SPACE (' ')
var ('var')
WHITE_SPACE (' ')
( ('(')
identifier ('k')
, (',')
WHITE_SPACE (' ')
identifier ('v')
) (')')
WHITE_SPACE (' ')
in ('in')
WHITE_SPACE (' ')
identifier ('words')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"letter: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('k')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('", word: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('v')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"\nIterating over a json object :"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
json ('json')
WHITE_SPACE (' ')
identifier ('apple')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('name')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"apple"')
, (',')
WHITE_SPACE (' ')
identifier ('colors')
: (':')
WHITE_SPACE (' ')
[ ('[')
QUOTED_STRING_LITERAL ('"red"')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"green"')
] (']')
, (',')
WHITE_SPACE (' ')
identifier ('price')
: (':')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('5')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
map ('map')
< ('<')
json ('json')
> ('>')
WHITE_SPACE (' ')
identifier ('mapValue')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
< ('<')
map ('map')
< ('<')
json ('json')
> ('>')
> ('>')
WHITE_SPACE (' ')
map ('map')
< ('<')
json ('json')
> ('>')
. ('.')
identifier ('convert')
( ('(')
identifier ('apple')
) (')')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Iterating over a JSON is not supported. To iterate over a JSON, first convert the JSON to a map and then iterate')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// over the newly created map.')
WHITE_SPACE ('\n    ')
foreach ('foreach')
WHITE_SPACE (' ')
var ('var')
WHITE_SPACE (' ')
( ('(')
identifier ('i')
, (',')
WHITE_SPACE (' ')
identifier ('j')
) (')')
WHITE_SPACE (' ')
in ('in')
WHITE_SPACE (' ')
identifier ('mapValue')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('j')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
string ('string')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"string value: "')
, (',')
WHITE_SPACE (' ')
identifier ('j')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('j')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
int ('int')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"int value: "')
, (',')
WHITE_SPACE (' ')
identifier ('j')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('j')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
json ('json')
[ ('[')
] (']')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"json array value: "')
, (',')
WHITE_SPACE (' ')
identifier ('j')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// JSON is a union type for () or null | int | float | decimal | string | json[] | map<json>,')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// `j` in else block if type cannot be inferred then it is type `anydata`.')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"non-string value: "')
, (',')
WHITE_SPACE (' ')
identifier ('j')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"\nIterating over a json array :"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// To Iterate over a JSON array, you need to first cast it into an array of json (`json[]`).')
WHITE_SPACE ('\n    ')
json ('json')
[ ('[')
] (']')
WHITE_SPACE (' ')
identifier ('colors')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
< ('<')
json ('json')
[ ('[')
] (']')
> ('>')
identifier ('apple')
. ('.')
identifier ('colors')
; (';')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('counter')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
; (';')
WHITE_SPACE ('\n    ')
foreach ('foreach')
WHITE_SPACE (' ')
var ('var')
WHITE_SPACE (' ')
identifier ('j')
WHITE_SPACE (' ')
in ('in')
WHITE_SPACE (' ')
identifier ('colors')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"color "')
, (',')
WHITE_SPACE (' ')
identifier ('counter')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('": "')
, (',')
WHITE_SPACE (' ')
identifier ('j')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('counter')
WHITE_SPACE (' ')
+= ('+=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"\nIterating over an xml :"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
xml ('xml')
WHITE_SPACE (' ')
identifier ('book')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
XML_LITERAL_START ('xml `')
XML_TAG_OPEN ('<')
XML_QNAME ('book')
XML_TAG_CLOSE ('>')
XML_TEXT_SEQUENCE ('\n                        ')
XML_TAG_OPEN ('<')
XML_QNAME ('name')
XML_TAG_CLOSE ('>')
XML_TEXT_SEQUENCE ('Sherlock Holmes')
XML_TAG_OPEN_SLASH ('</')
XML_QNAME ('name')
XML_TAG_CLOSE ('>')
XML_TEXT_SEQUENCE ('\n                        ')
XML_TAG_OPEN ('<')
XML_QNAME ('author')
XML_TAG_CLOSE ('>')
XML_TEXT_SEQUENCE ('Sir Arthur Conan Doyle')
XML_TAG_OPEN_SLASH ('</')
XML_QNAME ('author')
XML_TAG_CLOSE ('>')
XML_TEXT_SEQUENCE ('\n                    ')
XML_TAG_OPEN_SLASH ('</')
XML_QNAME ('book')
XML_TAG_CLOSE ('>')
XML_LITERAL_END ('`')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Iterating over an XML will return each element in each iteration.')
WHITE_SPACE ('\n    ')
identifier ('counter')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
; (';')
WHITE_SPACE ('\n    ')
foreach ('foreach')
WHITE_SPACE (' ')
var ('var')
WHITE_SPACE (' ')
identifier ('x')
WHITE_SPACE (' ')
in ('in')
WHITE_SPACE (' ')
identifier ('book')
. ('.')
* ('*')
. ('.')
identifier ('elements')
( ('(')
) (')')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"xml at "')
, (',')
WHITE_SPACE (' ')
identifier ('counter')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('": "')
, (',')
WHITE_SPACE (' ')
identifier ('x')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('counter')
WHITE_SPACE (' ')
+= ('+=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"\nIterating over a closed integer range :"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('endValue')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('10')
; (';')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('sum')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// A closed integer range in the `foreach` statement represents an incremental integer value range from the start')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// expression (`1`) to the end expression (`endValue`) inclusively.')
WHITE_SPACE ('\n    ')
foreach ('foreach')
WHITE_SPACE (' ')
var ('var')
WHITE_SPACE (' ')
identifier ('i')
WHITE_SPACE (' ')
in ('in')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1')
... ('...')
identifier ('endValue')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('sum')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('sum')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('i')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"summation from 1 to "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('endValue')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" is "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('sum')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"\nIterating over a half open integer range :"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('sum')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('0')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// A half open integer range in the `foreach` statement represents an incremental integer value range from the start')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// expression (`1`) inclusively, to the end expression (`endValue`) exclusively.')
WHITE_SPACE ('\n    ')
foreach ('foreach')
WHITE_SPACE (' ')
var ('var')
WHITE_SPACE (' ')
identifier ('i')
WHITE_SPACE (' ')
in ('in')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('1')
HALF_OPEN_RANGE ('..<')
identifier ('endValue')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('sum')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('sum')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('i')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"summation from 1 to "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('endValue')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" excluding "')
WHITE_SPACE ('\n                    ')
+ ('+')
WHITE_SPACE (' ')
identifier ('endValue')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" is "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('sum')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
