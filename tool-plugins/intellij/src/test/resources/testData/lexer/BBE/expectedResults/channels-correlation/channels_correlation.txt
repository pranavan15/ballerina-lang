import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('http')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('log')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Defines a channel with json constrained type.')
WHITE_SPACE ('\n')
channel ('channel')
< ('<')
json ('json')
> ('>')
WHITE_SPACE (' ')
identifier ('jsonChannel')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
new ('new')
; (';')
WHITE_SPACE ('\n\n')
service ('service')
WHITE_SPACE (' ')
identifier ('channelService')
WHITE_SPACE (' ')
on ('on')
WHITE_SPACE (' ')
new ('new')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('Listener')
( ('(')
DECIMAL_INTEGER_LITERAL ('9090')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n    ')
resource ('resource')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('receive')
( ('(')
identifier ('http')
: (':')
identifier ('Caller')
WHITE_SPACE (' ')
identifier ('caller')
, (',')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('Request')
WHITE_SPACE (' ')
identifier ('request')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n        ')
LINE_COMMENT ('// A key can be associated with a channel action.')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// You can use a key to correlate receivers and senders.')
WHITE_SPACE ('\n        ')
string ('string')
WHITE_SPACE (' ')
identifier ('key')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"123"')
; (';')
WHITE_SPACE ('\n\n        ')
json ('json')
WHITE_SPACE (' ')
identifier ('jsonMsg')
; (';')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Receive a message from the channel with given key.')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Execution waits here if the message is not available.')
WHITE_SPACE ('\n        ')
identifier ('jsonMsg')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
<- ('<-')
WHITE_SPACE (' ')
identifier ('jsonChannel')
, (',')
WHITE_SPACE (' ')
identifier ('key')
; (';')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Send the received message as the response.')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('caller')
-> ('->')
identifier ('respond')
( ('(')
identifier ('jsonMsg')
) (')')
; (';')
WHITE_SPACE ('\n\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('result')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
error ('error')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error sending response"')
, (',')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('result')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
resource ('resource')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('send')
( ('(')
identifier ('http')
: (':')
identifier ('Caller')
WHITE_SPACE (' ')
identifier ('caller')
, (',')
WHITE_SPACE (' ')
identifier ('http')
: (':')
identifier ('Request')
WHITE_SPACE (' ')
identifier ('request')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n        ')
LINE_COMMENT ('// Extract message from the request.')
WHITE_SPACE ('\n        ')
json ('json')
| ('|')
error ('error')
WHITE_SPACE (' ')
identifier ('message')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('request')
. ('.')
identifier ('getJsonPayload')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// Define the same key as the receiver's key.')
WHITE_SPACE ('\n        ')
string ('string')
WHITE_SPACE (' ')
identifier ('key')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"123"')
; (';')
WHITE_SPACE ('\n\n        ')
LINE_COMMENT ('// Send a message to the channel.')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// One of the receivers waiting on this key receives it.')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// If there is no receiver, the message is stored and execution continues.')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// A receiver can arrive later and fetch the message.')
WHITE_SPACE ('\n\n        ')
json ('json')
WHITE_SPACE (' ')
identifier ('jsonMessage')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
} ('}')
; (';')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('message')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
json ('json')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('jsonMessage')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('message')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Invalid message content"')
, (',')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('message')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n\n        ')
identifier ('jsonMessage')
WHITE_SPACE (' ')
-> ('->')
WHITE_SPACE (' ')
identifier ('jsonChannel')
, (',')
WHITE_SPACE (' ')
identifier ('key')
; (';')
WHITE_SPACE ('\n\n        ')
var ('var')
WHITE_SPACE (' ')
identifier ('result')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('caller')
-> ('->')
identifier ('respond')
( ('(')
{ ('{')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"send"')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Success!!"')
WHITE_SPACE (' ')
} ('}')
) (')')
; (';')
WHITE_SPACE ('\n        ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('result')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
error ('error')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n           ')
identifier ('log')
: (':')
identifier ('printError')
( ('(')
QUOTED_STRING_LITERAL ('"Error sending response"')
, (',')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('result')
) (')')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
