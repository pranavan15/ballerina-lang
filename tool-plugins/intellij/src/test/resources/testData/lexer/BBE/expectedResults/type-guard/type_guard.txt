import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
type ('type')
WHITE_SPACE (' ')
identifier ('Person')
WHITE_SPACE (' ')
record ('record')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('name')
; (';')
WHITE_SPACE ('\n    ')
identifier ('Address')
? ('?')
WHITE_SPACE (' ')
identifier ('address')
; (';')
WHITE_SPACE ('\n    ')
identifier ('Employment')
? ('?')
WHITE_SPACE (' ')
identifier ('employment')
; (';')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
type ('type')
WHITE_SPACE (' ')
identifier ('Address')
WHITE_SPACE (' ')
record ('record')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('street')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('city')
; (';')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
type ('type')
WHITE_SPACE (' ')
identifier ('Employment')
WHITE_SPACE (' ')
record ('record')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('company')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('position')
; (';')
WHITE_SPACE ('\n')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
function ('function')
WHITE_SPACE (' ')
identifier ('typeTestDemo')
( ('(')
identifier ('Person')
WHITE_SPACE (' ')
identifier ('p')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
( ('(')
identifier ('Address')
? ('?')
| ('|')
identifier ('Employment')
| ('|')
error ('error')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Person's employment is assigned to simple variable reference.')
WHITE_SPACE ('\n    ')
identifier ('Employment')
? ('?')
WHITE_SPACE (' ')
identifier ('emp')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('p')
. ('.')
identifier ('employment')
; (';')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('p')
. ('.')
identifier ('address')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
identifier ('Address')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// This is a type-guard which tests for `Address` type for `p.address` field from `Person` record.')
WHITE_SPACE ('\n        ')
return ('return')
WHITE_SPACE (' ')
identifier ('p')
. ('.')
identifier ('address')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('emp')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
identifier ('Employment')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// This is a type-guard, which tests for `Employment` type, thus the type of `emp` variable will be `Employment`')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// within this if-block.')
WHITE_SPACE ('\n        ')
return ('return')
WHITE_SPACE (' ')
identifier ('emp')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
error ('error')
WHITE_SPACE (' ')
identifier ('addNotFoundErr')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
error ('error')
( ('(')
QUOTED_STRING_LITERAL ('"address not found"')
) (')')
; (';')
WHITE_SPACE ('\n        ')
return ('return')
WHITE_SPACE (' ')
identifier ('addNotFoundErr')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
type ('type')
WHITE_SPACE (' ')
identifier ('KeyNotFoundError')
WHITE_SPACE (' ')
error ('error')
< ('<')
string ('string')
, (',')
WHITE_SPACE (' ')
record ('record')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
string ('string')
WHITE_SPACE (' ')
identifier ('key')
; (';')
WHITE_SPACE (' ')
} ('}')
> ('>')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// The values of this map are constrained to the values of the optional string type.')
WHITE_SPACE ('\n')
map ('map')
< ('<')
string ('string')
? ('?')
> ('>')
WHITE_SPACE (' ')
identifier ('values')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
QUOTED_STRING_LITERAL ('"key1"')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"value1"')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"key2"')
: (':')
WHITE_SPACE (' ')
( ('(')
) (')')
} ('}')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// This function returns either a `string`, a `KeyNotFoundError` or nil.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('getValue')
( ('(')
string ('string')
WHITE_SPACE (' ')
identifier ('key')
) (')')
WHITE_SPACE (' ')
returns ('returns')
WHITE_SPACE (' ')
string ('string')
? ('?')
| ('|')
identifier ('KeyNotFoundError')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
! ('!')
identifier ('values')
. ('.')
identifier ('hasKey')
( ('(')
identifier ('key')
) (')')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('KeyNotFoundError')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
error ('error')
( ('(')
QUOTED_STRING_LITERAL ('"key '"')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('key')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"' not found"')
, (',')
WHITE_SPACE ('\n                                     ')
{ ('{')
WHITE_SPACE (' ')
identifier ('key')
: (':')
WHITE_SPACE (' ')
identifier ('key')
WHITE_SPACE (' ')
} ('}')
) (')')
; (';')
WHITE_SPACE ('\n        ')
return ('return')
WHITE_SPACE (' ')
identifier ('err')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
return ('return')
WHITE_SPACE (' ')
identifier ('values')
[ ('[')
identifier ('key')
] (']')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// This function prints a custom message depending on the type of the result.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('print')
( ('(')
string ('string')
? ('?')
| ('|')
identifier ('KeyNotFoundError')
WHITE_SPACE (' ')
identifier ('result')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// This type-guard check (also known as `is` check) which checks the type of the reference variable. Inside')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// the if block, the reference variable will be converted to the respective `is` checked type in the type guard.')
WHITE_SPACE ('\n    ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('result')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
string ('string')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// The type of the variable `result` will be `string` within this if-block')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"value: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('result')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('result')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
( ('(')
) (')')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// The type of the variable `result` will be `()` or `nil`')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"value is ()"')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE (' ')
else ('else')
WHITE_SPACE (' ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('result')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
identifier ('KeyNotFoundError')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// The type of the variable `result` will be `KeyNotFoundError`')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('result')
. ('.')
identifier ('reason')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
PUBLIC ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('print')
( ('(')
identifier ('getValue')
( ('(')
QUOTED_STRING_LITERAL ('"key1"')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('print')
( ('(')
identifier ('getValue')
( ('(')
QUOTED_STRING_LITERAL ('"key2"')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('print')
( ('(')
identifier ('getValue')
( ('(')
QUOTED_STRING_LITERAL ('"key3"')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
identifier ('Person')
WHITE_SPACE (' ')
identifier ('tom')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
identifier ('name')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"tom"')
, (',')
WHITE_SPACE (' ')
identifier ('address')
: (':')
WHITE_SPACE (' ')
( ('(')
) (')')
, (',')
WHITE_SPACE ('\n                   ')
identifier ('employment')
: (':')
WHITE_SPACE (' ')
{ ('{')
identifier ('company')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Ballerina"')
, (',')
WHITE_SPACE (' ')
identifier ('position')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"CEO"')
} ('}')
WHITE_SPACE (' ')
} ('}')
; (';')
WHITE_SPACE ('\n    ')
identifier ('Address')
? ('?')
| ('|')
identifier ('Employment')
| ('|')
error ('error')
WHITE_SPACE (' ')
identifier ('address')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('typeTestDemo')
( ('(')
identifier ('tom')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Address: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('sprintf')
( ('(')
QUOTED_STRING_LITERAL ('"%s"')
, (',')
WHITE_SPACE (' ')
identifier ('address')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
