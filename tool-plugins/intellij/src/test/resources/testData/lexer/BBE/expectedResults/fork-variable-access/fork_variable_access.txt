import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// The in scope variables can be accessed by the workers inside the fork block.')
WHITE_SPACE ('\n')
PUBLIC ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// These variables can be accessed by the forked workers.')
WHITE_SPACE ('\n    ')
int ('int')
WHITE_SPACE (' ')
identifier ('i')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('100')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('s')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"WSO2"')
; (';')
WHITE_SPACE ('\n    ')
map ('map')
< ('<')
string ('string')
> ('>')
WHITE_SPACE (' ')
identifier ('m')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"name"')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Bert"')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"city"')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"New York"')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"postcode"')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"10001"')
} ('}')
; (';')
WHITE_SPACE ('\n\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('name')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
< ('<')
string ('string')
> ('>')
WHITE_SPACE (' ')
identifier ('m')
[ ('[')
QUOTED_STRING_LITERAL ('"name"')
] (']')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('city')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
< ('<')
string ('string')
> ('>')
WHITE_SPACE (' ')
identifier ('m')
[ ('[')
QUOTED_STRING_LITERAL ('"city"')
] (']')
; (';')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('postcode')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
< ('<')
string ('string')
> ('>')
WHITE_SPACE (' ')
identifier ('m')
[ ('[')
QUOTED_STRING_LITERAL ('"postcode"')
] (']')
; (';')
WHITE_SPACE ('\n\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"[value type variables] before fork: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE ('\n                   ')
QUOTED_STRING_LITERAL ('"value of integer variable is ["')
, (',')
WHITE_SPACE (' ')
identifier ('i')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"] "')
, (',')
WHITE_SPACE ('\n                   ')
QUOTED_STRING_LITERAL ('"value of string variable is ["')
, (',')
WHITE_SPACE (' ')
identifier ('s')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"]"')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"[reference type variables] before fork: value "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE ('\n      ')
QUOTED_STRING_LITERAL ('"of name is ["')
, (',')
WHITE_SPACE (' ')
identifier ('name')
WHITE_SPACE (' ')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"] value of city is ["')
, (',')
WHITE_SPACE (' ')
identifier ('city')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"] value of "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE ('\n      ')
QUOTED_STRING_LITERAL ('"postcode is ["')
, (',')
WHITE_SPACE (' ')
identifier ('postcode')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"]"')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Declare the fork block.')
WHITE_SPACE ('\n    ')
fork ('fork')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
worker ('worker')
WHITE_SPACE (' ')
identifier ('W1')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// Change the value of the integer variable `i` within worker `W1`.')
WHITE_SPACE ('\n            ')
identifier ('i')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('23')
; (';')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// Change the value of the map variable `m` within worker `W1`.')
WHITE_SPACE ('\n            ')
identifier ('m')
[ ('[')
QUOTED_STRING_LITERAL ('"name"')
] (']')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Moose"')
; (';')
WHITE_SPACE ('\n\n            ')
fork ('fork')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
worker ('worker')
WHITE_SPACE (' ')
identifier ('W3')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                    ')
LINE_COMMENT ('// Change the value of the map variable `m` within worker')
WHITE_SPACE ('\n                    ')
LINE_COMMENT ('// `W3`.')
WHITE_SPACE ('\n                    ')
string ('string')
WHITE_SPACE (' ')
identifier ('street')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Wall Street"')
; (';')
WHITE_SPACE ('\n                    ')
identifier ('m')
[ ('[')
QUOTED_STRING_LITERAL ('"street"')
] (']')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('street')
; (';')
WHITE_SPACE ('\n\n                    ')
LINE_COMMENT ('// Change the value of the integer variable `i` within')
WHITE_SPACE ('\n                    ')
LINE_COMMENT ('// worker `W3`.')
WHITE_SPACE ('\n                    ')
identifier ('i')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('i')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('100')
; (';')
WHITE_SPACE ('\n                ')
} ('}')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n\n        ')
worker ('worker')
WHITE_SPACE (' ')
identifier ('W2')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// Change the value of the string variable `s` within worker `W2`.')
WHITE_SPACE ('\n            ')
identifier ('s')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Ballerina"')
; (';')
WHITE_SPACE ('\n            ')
LINE_COMMENT ('// Change the value of the map variable `m` within the worker `W2`.')
WHITE_SPACE ('\n            ')
identifier ('m')
[ ('[')
QUOTED_STRING_LITERAL ('"city"')
] (']')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Manhattan"')
; (';')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Wait for both workers `W1` and `W2` to finish.')
WHITE_SPACE ('\n    ')
identifier ('_')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
wait ('wait')
WHITE_SPACE (' ')
{ ('{')
identifier ('W1')
, (',')
WHITE_SPACE (' ')
identifier ('W2')
} ('}')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// Print the values after the fork block to check if the values of the ')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// variables have changed.')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// The value type variables have not changed since they are passed in as ')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// a copy of the original variable.')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"[value type variables] after fork: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE ('\n               ')
QUOTED_STRING_LITERAL ('"value of integer variable is ["')
, (',')
WHITE_SPACE (' ')
identifier ('i')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"] "')
, (',')
WHITE_SPACE ('\n               ')
QUOTED_STRING_LITERAL ('"value of string variable is ["')
, (',')
WHITE_SPACE (' ')
identifier ('s')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"]"')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// The internal content of the reference type variables have got updated ')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// since they are passed in as a reference to the workers.')
WHITE_SPACE ('\n    ')
identifier ('name')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
< ('<')
string ('string')
> ('>')
WHITE_SPACE (' ')
identifier ('m')
[ ('[')
QUOTED_STRING_LITERAL ('"name"')
] (']')
; (';')
WHITE_SPACE ('\n    ')
identifier ('city')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
< ('<')
string ('string')
> ('>')
WHITE_SPACE (' ')
identifier ('m')
[ ('[')
QUOTED_STRING_LITERAL ('"city"')
] (']')
; (';')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// Get value of the new field added to map variable `m` inside worker `W3`.')
WHITE_SPACE ('\n    ')
string ('string')
WHITE_SPACE (' ')
identifier ('street')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
< ('<')
string ('string')
> ('>')
WHITE_SPACE (' ')
identifier ('m')
[ ('[')
QUOTED_STRING_LITERAL ('"street"')
] (']')
; (';')
WHITE_SPACE ('\n    ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"[reference type variables] after fork: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE ('\n               ')
QUOTED_STRING_LITERAL ('"value of name is ["')
, (',')
WHITE_SPACE (' ')
identifier ('name')
, (',')
WHITE_SPACE ('\n               ')
QUOTED_STRING_LITERAL ('"] value of city is ["')
, (',')
WHITE_SPACE (' ')
identifier ('city')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"] value of street is ["')
, (',')
WHITE_SPACE (' ')
identifier ('street')
, (',')
WHITE_SPACE ('\n               ')
QUOTED_STRING_LITERAL ('"] value of postcode is ["')
, (',')
WHITE_SPACE (' ')
identifier ('postcode')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"]"')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
