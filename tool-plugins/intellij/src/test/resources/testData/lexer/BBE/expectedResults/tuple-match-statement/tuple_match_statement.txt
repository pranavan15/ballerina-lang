import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
PUBLIC ('public')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('main')
( ('(')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// In here there are four different variables created and they will be used with invoking the function 'foo',')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// which does the match.')
WHITE_SPACE ('\n    ')
( ('(')
string ('string')
, (',')
WHITE_SPACE (' ')
int ('int')
) (')')
| ('|')
( ('(')
float ('float')
, (',')
WHITE_SPACE (' ')
string ('string')
, (',')
WHITE_SPACE (' ')
boolean ('boolean')
) (')')
| ('|')
float ('float')
WHITE_SPACE (' ')
identifier ('a1')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_FLOATING_POINT_NUMBER ('66.6')
; (';')
WHITE_SPACE ('\n    ')
( ('(')
string ('string')
, (',')
WHITE_SPACE (' ')
int ('int')
) (')')
| ('|')
( ('(')
float ('float')
, (',')
WHITE_SPACE (' ')
string ('string')
, (',')
WHITE_SPACE (' ')
boolean ('boolean')
) (')')
| ('|')
float ('float')
WHITE_SPACE (' ')
identifier ('a2')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
( ('(')
QUOTED_STRING_LITERAL ('"Hello"')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('12')
) (')')
; (';')
WHITE_SPACE ('\n    ')
( ('(')
float ('float')
, (',')
WHITE_SPACE (' ')
boolean ('boolean')
) (')')
| ('|')
( ('(')
float ('float')
, (',')
WHITE_SPACE (' ')
string ('string')
, (',')
WHITE_SPACE (' ')
boolean ('boolean')
) (')')
| ('|')
float ('float')
WHITE_SPACE (' ')
identifier ('a3')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
( ('(')
DECIMAL_FLOATING_POINT_NUMBER ('4.5')
, (',')
WHITE_SPACE (' ')
BOOLEAN_LITERAL ('true')
) (')')
; (';')
WHITE_SPACE ('\n    ')
( ('(')
string ('string')
, (',')
WHITE_SPACE (' ')
int ('int')
) (')')
| ('|')
( ('(')
float ('float')
, (',')
WHITE_SPACE (' ')
string ('string')
, (',')
WHITE_SPACE (' ')
boolean ('boolean')
) (')')
| ('|')
float ('float')
WHITE_SPACE (' ')
identifier ('a4')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
( ('(')
DECIMAL_FLOATING_POINT_NUMBER ('6.7')
, (',')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"Test"')
, (',')
WHITE_SPACE (' ')
BOOLEAN_LITERAL ('false')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
identifier ('basicMatch')
( ('(')
identifier ('a1')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('basicMatch')
( ('(')
identifier ('a2')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('basicMatch')
( ('(')
identifier ('a3')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('basicMatch')
( ('(')
identifier ('a4')
) (')')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('// In this example, there are five different variables created and they will be used with invoking the function')
WHITE_SPACE ('\n    ')
LINE_COMMENT ('// 'bar', which does the match along with type guard conditions.')
WHITE_SPACE ('\n    ')
( ('(')
string ('string')
, (',')
WHITE_SPACE (' ')
int ('int')
) (')')
| ('|')
( ('(')
boolean ('boolean')
, (',')
WHITE_SPACE (' ')
int ('int')
) (')')
| ('|')
( ('(')
int ('int')
, (',')
WHITE_SPACE (' ')
boolean ('boolean')
) (')')
| ('|')
int ('int')
| ('|')
float ('float')
WHITE_SPACE (' ')
identifier ('b1')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
( ('(')
QUOTED_STRING_LITERAL ('"Hello"')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('45')
) (')')
; (';')
WHITE_SPACE ('\n    ')
( ('(')
string ('string')
, (',')
WHITE_SPACE (' ')
int ('int')
) (')')
| ('|')
( ('(')
float ('float')
, (',')
WHITE_SPACE (' ')
boolean ('boolean')
) (')')
| ('|')
( ('(')
int ('int')
, (',')
WHITE_SPACE (' ')
boolean ('boolean')
) (')')
| ('|')
int ('int')
| ('|')
float ('float')
WHITE_SPACE (' ')
identifier ('b2')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
( ('(')
DECIMAL_FLOATING_POINT_NUMBER ('4.5')
, (',')
WHITE_SPACE (' ')
BOOLEAN_LITERAL ('true')
) (')')
; (';')
WHITE_SPACE ('\n    ')
( ('(')
float ('float')
, (',')
WHITE_SPACE (' ')
boolean ('boolean')
) (')')
| ('|')
( ('(')
boolean ('boolean')
, (',')
WHITE_SPACE (' ')
int ('int')
) (')')
| ('|')
( ('(')
int ('int')
, (',')
WHITE_SPACE (' ')
boolean ('boolean')
) (')')
| ('|')
int ('int')
| ('|')
float ('float')
WHITE_SPACE (' ')
identifier ('b3')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
( ('(')
BOOLEAN_LITERAL ('false')
, (',')
WHITE_SPACE (' ')
DECIMAL_INTEGER_LITERAL ('4')
) (')')
; (';')
WHITE_SPACE ('\n    ')
( ('(')
string ('string')
, (',')
WHITE_SPACE (' ')
int ('int')
) (')')
| ('|')
( ('(')
float ('float')
, (',')
WHITE_SPACE (' ')
boolean ('boolean')
) (')')
| ('|')
( ('(')
int ('int')
, (',')
WHITE_SPACE (' ')
boolean ('boolean')
) (')')
| ('|')
int ('int')
| ('|')
float ('float')
WHITE_SPACE (' ')
identifier ('b4')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
( ('(')
DECIMAL_INTEGER_LITERAL ('455')
, (',')
WHITE_SPACE (' ')
BOOLEAN_LITERAL ('true')
) (')')
; (';')
WHITE_SPACE ('\n    ')
( ('(')
float ('float')
, (',')
WHITE_SPACE (' ')
boolean ('boolean')
) (')')
| ('|')
( ('(')
boolean ('boolean')
, (',')
WHITE_SPACE (' ')
int ('int')
) (')')
| ('|')
( ('(')
int ('int')
, (',')
WHITE_SPACE (' ')
boolean ('boolean')
) (')')
| ('|')
float ('float')
WHITE_SPACE (' ')
identifier ('b5')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
DECIMAL_FLOATING_POINT_NUMBER ('5.6')
; (';')
WHITE_SPACE ('\n\n    ')
identifier ('matchWithTypeGuard')
( ('(')
identifier ('b1')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('matchWithTypeGuard')
( ('(')
identifier ('b2')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('matchWithTypeGuard')
( ('(')
identifier ('b3')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('matchWithTypeGuard')
( ('(')
identifier ('b4')
) (')')
; (';')
WHITE_SPACE ('\n    ')
identifier ('matchWithTypeGuard')
( ('(')
identifier ('b5')
) (')')
; (';')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Following method uses structured tuple match patterns with different sizes. The given match expression')
WHITE_SPACE ('\n')
LINE_COMMENT ('// will be checked for "isLike" relationship and will be matched at runtime.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('basicMatch')
( ('(')
any ('any')
WHITE_SPACE (' ')
identifier ('a')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
match ('match')
WHITE_SPACE (' ')
identifier ('a')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// This pattern check for tuple type of three variables and types can be of any.')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
( ('(')
identifier ('s')
, (',')
WHITE_SPACE (' ')
identifier ('i')
, (',')
WHITE_SPACE (' ')
identifier ('b')
) (')')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Matched with three vars : "')
WHITE_SPACE ('\n                                    ')
+ ('+')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('sprintf')
( ('(')
QUOTED_STRING_LITERAL ('"%s"')
, (',')
WHITE_SPACE (' ')
identifier ('a')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// This pattern check for tuple type of two variables and types can be of any.')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
( ('(')
identifier ('s')
, (',')
WHITE_SPACE (' ')
identifier ('i')
) (')')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Matched with two vars : "')
WHITE_SPACE ('\n                                    ')
+ ('+')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('sprintf')
( ('(')
QUOTED_STRING_LITERAL ('"%s"')
, (',')
WHITE_SPACE (' ')
identifier ('a')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// This pattern check for single variable and type can be of any. This has to be last pattern.')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
identifier ('s')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Matched with single var : "')
WHITE_SPACE ('\n                                    ')
+ ('+')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('sprintf')
( ('(')
QUOTED_STRING_LITERAL ('"%s"')
, (',')
WHITE_SPACE (' ')
identifier ('a')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n\n')
LINE_COMMENT ('// Following method uses structured tuple match patterns with different sizes along with a type guards. The given')
WHITE_SPACE ('\n')
LINE_COMMENT ('// match expression will be checked for "isLike" relationship and also it will check the type guard for the pattern')
WHITE_SPACE ('\n')
LINE_COMMENT ('// to match at runtime.')
WHITE_SPACE ('\n')
function ('function')
WHITE_SPACE (' ')
identifier ('matchWithTypeGuard')
( ('(')
any ('any')
WHITE_SPACE (' ')
identifier ('b')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
match ('match')
WHITE_SPACE (' ')
identifier ('b')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// This pattern check for tuple type of two variables and types has to 'string' and 'int'.')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
( ('(')
identifier ('s')
, (',')
WHITE_SPACE (' ')
identifier ('i')
) (')')
WHITE_SPACE (' ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('s')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
string ('string')
WHITE_SPACE (' ')
&& ('&&')
WHITE_SPACE (' ')
identifier ('i')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
int ('int')
) (')')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE ('\n           ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"'s' is string and 'i' is int : "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('sprintf')
( ('(')
QUOTED_STRING_LITERAL ('"%s"')
, (',')
WHITE_SPACE (' ')
identifier ('b')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// This pattern check for tuple type of two variables and first variable should be of type 'float'.')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
( ('(')
identifier ('s')
, (',')
WHITE_SPACE (' ')
identifier ('i')
) (')')
WHITE_SPACE (' ')
if ('if')
WHITE_SPACE (' ')
identifier ('s')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
float ('float')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE ('\n           ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Only 's' is float : "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('sprintf')
( ('(')
QUOTED_STRING_LITERAL ('"%s"')
, (',')
WHITE_SPACE (' ')
identifier ('b')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// This pattern check for tuple type of two variables and second variable should be of type 'int'.')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
( ('(')
identifier ('s')
, (',')
WHITE_SPACE (' ')
identifier ('i')
) (')')
WHITE_SPACE (' ')
if ('if')
WHITE_SPACE (' ')
identifier ('i')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
int ('int')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE ('\n           ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Only 'i' is int : "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('sprintf')
( ('(')
QUOTED_STRING_LITERAL ('"%s"')
, (',')
WHITE_SPACE (' ')
identifier ('b')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// This pattern check for tuple type of two variables without any type guard.')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
( ('(')
identifier ('s')
, (',')
WHITE_SPACE (' ')
identifier ('i')
) (')')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"No type guard : "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('sprintf')
( ('(')
QUOTED_STRING_LITERAL ('"%s"')
, (',')
WHITE_SPACE (' ')
identifier ('b')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n        ')
LINE_COMMENT ('// This pattern check for single variable and its type should be 'float'.')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
identifier ('s')
WHITE_SPACE (' ')
if ('if')
WHITE_SPACE (' ')
identifier ('s')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
float ('float')
WHITE_SPACE (' ')
=> ('=>')
WHITE_SPACE ('\n           ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"'s' is float only : "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('io')
: (':')
identifier ('sprintf')
( ('(')
QUOTED_STRING_LITERAL ('"%s"')
, (',')
WHITE_SPACE (' ')
identifier ('b')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
