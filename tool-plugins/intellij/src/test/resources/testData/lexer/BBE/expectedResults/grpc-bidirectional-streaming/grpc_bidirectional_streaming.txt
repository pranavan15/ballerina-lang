LINE_COMMENT ('// This is the server implementation for the bidirectional streaming scenario.')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('grpc')
; (';')
WHITE_SPACE ('\n')
import ('import')
WHITE_SPACE (' ')
identifier ('ballerina')
/ ('/')
identifier ('io')
; (';')
WHITE_SPACE ('\n\n')
@ ('@')
identifier ('grpc')
: (':')
identifier ('ServiceConfig')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
identifier ('name')
: (':')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('"chat"')
, (',')
WHITE_SPACE ('\n    ')
identifier ('clientStreaming')
: (':')
WHITE_SPACE (' ')
BOOLEAN_LITERAL ('true')
, (',')
WHITE_SPACE ('\n    ')
identifier ('serverStreaming')
: (':')
WHITE_SPACE (' ')
BOOLEAN_LITERAL ('true')
WHITE_SPACE ('\n')
} ('}')
WHITE_SPACE ('\n')
service ('service')
WHITE_SPACE (' ')
identifier ('Chat')
WHITE_SPACE (' ')
on ('on')
WHITE_SPACE (' ')
new ('new')
WHITE_SPACE (' ')
identifier ('grpc')
: (':')
identifier ('Listener')
( ('(')
DECIMAL_INTEGER_LITERAL ('9090')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n    ')
map ('map')
< ('<')
identifier ('grpc')
: (':')
identifier ('Caller')
> ('>')
WHITE_SPACE (' ')
identifier ('consMap')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
{ ('{')
} ('}')
; (';')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('//This resource is triggered when a new caller connection is initialized.')
WHITE_SPACE ('\n    ')
resource ('resource')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('onOpen')
( ('(')
identifier ('grpc')
: (':')
identifier ('Caller')
WHITE_SPACE (' ')
identifier ('caller')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
STRING_TEMPLATE_LITERAL_START ('string `')
STRING_TEMPLATE_EXPRESSION_START ('{{')
identifier ('caller')
. ('.')
identifier ('getId')
( ('(')
) (')')
EXPRESSION_END ('}}')
STRING_TEMPLATE_TEXT (' connected to chat')
STRING_TEMPLATE_LITERAL_END ('`')
) (')')
; (';')
WHITE_SPACE ('\n        ')
identifier ('self')
. ('.')
identifier ('consMap')
[ ('[')
< ('<')
string ('string')
> ('>')
identifier ('caller')
. ('.')
identifier ('getId')
( ('(')
) (')')
] (']')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('caller')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('//This resource is triggered when the caller sends a request message to the service.')
WHITE_SPACE ('\n    ')
resource ('resource')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('onMessage')
( ('(')
identifier ('grpc')
: (':')
identifier ('Caller')
WHITE_SPACE (' ')
identifier ('caller')
, (',')
WHITE_SPACE (' ')
identifier ('ChatMessage')
WHITE_SPACE (' ')
identifier ('chatMsg')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('grpc')
: (':')
identifier ('Caller')
WHITE_SPACE (' ')
identifier ('ep')
; (';')
WHITE_SPACE ('\n        ')
string ('string')
WHITE_SPACE (' ')
identifier ('msg')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
STRING_TEMPLATE_LITERAL_START ('string `')
STRING_TEMPLATE_EXPRESSION_START ('{{')
identifier ('chatMsg')
. ('.')
identifier ('name')
EXPRESSION_END ('}}')
STRING_TEMPLATE_EXPRESSION_START (': {{')
identifier ('chatMsg')
. ('.')
identifier ('message')
EXPRESSION_END ('}}')
STRING_TEMPLATE_LITERAL_END ('`')
; (';')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('msg')
) (')')
; (';')
WHITE_SPACE ('\n        ')
foreach ('foreach')
WHITE_SPACE (' ')
var ('var')
WHITE_SPACE (' ')
identifier ('con')
WHITE_SPACE (' ')
in ('in')
WHITE_SPACE (' ')
identifier ('self')
. ('.')
identifier ('consMap')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
( ('(')
identifier ('_')
, (',')
WHITE_SPACE (' ')
identifier ('ep')
) (')')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('con')
; (';')
WHITE_SPACE ('\n            ')
error ('error')
? ('?')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('ep')
-> ('->')
identifier ('send')
( ('(')
identifier ('msg')
) (')')
; (';')
WHITE_SPACE ('\n            ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('err')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
error ('error')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Error from Connector: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('err')
. ('.')
identifier ('reason')
( ('(')
) (')')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" - "')
WHITE_SPACE ('\n                                        ')
+ ('+')
WHITE_SPACE (' ')
< ('<')
string ('string')
> ('>')
identifier ('err')
. ('.')
identifier ('detail')
( ('(')
) (')')
. ('.')
identifier ('message')
) (')')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('//This resource is triggered when the server receives an error message from the caller.')
WHITE_SPACE ('\n    ')
resource ('resource')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('onError')
( ('(')
identifier ('grpc')
: (':')
identifier ('Caller')
WHITE_SPACE (' ')
identifier ('caller')
, (',')
WHITE_SPACE (' ')
error ('error')
WHITE_SPACE (' ')
identifier ('err')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Unexpected Error at client side: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('err')
. ('.')
identifier ('reason')
( ('(')
) (')')
WHITE_SPACE ('\n                            ')
+ ('+')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" - "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
< ('<')
string ('string')
> ('>')
identifier ('err')
. ('.')
identifier ('detail')
( ('(')
) (')')
. ('.')
identifier ('message')
) (')')
; (';')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n\n    ')
LINE_COMMENT ('//This resource is triggered when the caller sends a notification to the server to indicate that it has finished sending messages.')
WHITE_SPACE ('\n    ')
resource ('resource')
WHITE_SPACE (' ')
function ('function')
WHITE_SPACE (' ')
identifier ('onComplete')
( ('(')
identifier ('grpc')
: (':')
identifier ('Caller')
WHITE_SPACE (' ')
identifier ('caller')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n        ')
identifier ('grpc')
: (':')
identifier ('Caller')
WHITE_SPACE (' ')
identifier ('ep')
; (';')
WHITE_SPACE ('\n        ')
string ('string')
WHITE_SPACE (' ')
identifier ('msg')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
STRING_TEMPLATE_LITERAL_START ('string `')
STRING_TEMPLATE_EXPRESSION_START ('{{')
identifier ('caller')
. ('.')
identifier ('getId')
( ('(')
) (')')
EXPRESSION_END ('}}')
STRING_TEMPLATE_TEXT (' left the chat')
STRING_TEMPLATE_LITERAL_END ('`')
; (';')
WHITE_SPACE ('\n        ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
identifier ('msg')
) (')')
; (';')
WHITE_SPACE ('\n        ')
var ('var')
WHITE_SPACE (' ')
identifier ('v')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('self')
. ('.')
identifier ('consMap')
. ('.')
identifier ('remove')
( ('(')
< ('<')
string ('string')
> ('>')
identifier ('caller')
. ('.')
identifier ('getId')
( ('(')
) (')')
) (')')
; (';')
WHITE_SPACE ('\n        ')
foreach ('foreach')
WHITE_SPACE (' ')
var ('var')
WHITE_SPACE (' ')
identifier ('con')
WHITE_SPACE (' ')
in ('in')
WHITE_SPACE (' ')
identifier ('self')
. ('.')
identifier ('consMap')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n            ')
( ('(')
identifier ('_')
, (',')
WHITE_SPACE (' ')
identifier ('ep')
) (')')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('con')
; (';')
WHITE_SPACE ('\n            ')
error ('error')
? ('?')
WHITE_SPACE (' ')
identifier ('err')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('ep')
-> ('->')
identifier ('send')
( ('(')
identifier ('msg')
) (')')
; (';')
WHITE_SPACE ('\n            ')
if ('if')
WHITE_SPACE (' ')
( ('(')
identifier ('err')
WHITE_SPACE (' ')
is ('is')
WHITE_SPACE (' ')
error ('error')
) (')')
WHITE_SPACE (' ')
{ ('{')
WHITE_SPACE ('\n                ')
identifier ('io')
: (':')
identifier ('println')
( ('(')
QUOTED_STRING_LITERAL ('"Error from Connector: "')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
identifier ('err')
. ('.')
identifier ('reason')
( ('(')
) (')')
WHITE_SPACE (' ')
+ ('+')
WHITE_SPACE (' ')
QUOTED_STRING_LITERAL ('" - "')
WHITE_SPACE ('\n                                          ')
+ ('+')
WHITE_SPACE (' ')
< ('<')
string ('string')
> ('>')
identifier ('err')
. ('.')
identifier ('detail')
( ('(')
) (')')
. ('.')
identifier ('message')
) (')')
; (';')
WHITE_SPACE ('\n            ')
} ('}')
WHITE_SPACE ('\n        ')
} ('}')
WHITE_SPACE ('\n    ')
} ('}')
WHITE_SPACE ('\n')
} ('}')
