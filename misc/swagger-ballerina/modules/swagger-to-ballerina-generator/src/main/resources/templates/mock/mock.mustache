import ballerina/http;
import ballerina/log;
import ballerina/mime;
import ballerina/swagger;
{{#servers}}
listener http:Listener ep{{@index}} = new({{port}}{{#host}}, config = {host: "{{host}}"}{{/host}});
{{/servers}}
@swagger:ServiceInfo {{=<% %>=}}{<%={{ }}=%>{{#info}}
    title: "{{title}}"{{#description}},
    description: "{{description}}"{{/description}},
    serviceVersion: "{{version}}"{{#termsOfService}},
    termsOfService: "{{termsOfService}}"{{/termsOfService}}{{#contact}},
    contact: {name: "{{contact.name}}", email: "{{contact.email}}", url: "{{contact.url}}"}{{/contact}}{{#license}},
    license: {name: "{{license.name}}", url: "{{license.url}}"}{{/license}}{{/info}}{{#if tags}},
    tags: [{{#tags}}
        {name: "{{name}}", description: "{{description}}", {{=<% %>=}}externalDocs: <%>doc%><%={{ }}=%>}{{#unless @last}},{{/unless}}{{/tags}}
    ]{{/if}}{{#if externalDocs}},
    externalDocs: {{>doc}}{{/if}}{{#if security}},
    security: [{{#security}}
        {{>security}}{{/security}}
    ]{{/if}}
}
@http:ServiceConfig {
    basePath: "{{servers.0.basePath}}"{{!-- {{only one base path is allowed for all endpoints}} --}}
}
service {{cut info.title " "}} on {{#servers}}ep{{@index}}{{#unless @last}}, {{/unless}}{{/servers}} {{=<% %>=}}{<%={{ }}=%>{{#paths}}{{#value}}{{#if sameResourceOperationExists}}{{#sameResourceOperations}}{{#value}}{{!-- If multiple methods belongs to one Ballerina resource implementation this will generate the code --}}

    @swagger:MultiResourceInfo {
        resourceInformation: {{=<% %>=}}{<%={{ }}=%>{{#operations}}
            "{{upper key}}":{{#value}}{
                summary: "{{summary}}"{{#if tags}},
                tags: [{{#tags}}"{{.}}"{{#unless @last}},{{/unless}}{{/tags}}]{{/if}}{{#if description}},
                description: "{{description}}"{{/if}}{{#if externalDocs}},
                externalDocs: {{>doc}}{{/if}}{{#if parameters}},
                parameters: [{{#parameters}}{
                    name: "{{name}}",{{#schema}}
                    paramType: "{{type}}",{{/schema}}
                    inInfo: "{{in}}",
                    description: "{{description}}",{{#required}}
                    required: {{required}},{{/required}}{{#deprecated}}
                    discontinued: {{deprecated}},{{/deprecated}}
                    allowEmptyValue: "{{allowEmptyValue}}"
                }{{#unless @last}},{{/unless}}{{/parameters}}]{{/if}}
            }{{#unless @last}},{{/unless}}{{/value}}{{/operations}}
        }
    }
    @http:ResourceConfig {{=<% %>=}}{<%={{ }}=%>{{#if methods}}
        methods:[{{#methods}}"{{.}}"{{#unless @last}}, {{/unless}}{{/methods}}],{{/if}}
        path:"{{../../key}}"{{#requestBody}}{{#equals "multipart/form-data" requestBody.selectedMedia.mediaType}}{{else}},
        body:"_{{resourceName}}Body"{{/equals}}{{/requestBody}}
    }{{#deprecated}}
    deprecated {}
    {{/deprecated}}
    resource function {{resourceName}} (http:Caller outboundEp, http:Request _{{resourceName}}Req{{#parameters}}{{>pathParams}}{{/parameters}}{{#requestBody}}{{>reqBody}}{{/requestBody}}) returns error? {{=<% %>=}}{<%={{ }}=%>{{#equals requestBody.selectedMedia.mediaType "multipart/form-data"}}
        mime:Entity[] _{{resourceName}}Body = check _{{resourceName}}Req.getBodyParts();{{/equals}}
        http:Response _{{resourceName}}Res = {{resourceName}}(_{{resourceName}}Req{{#parameters}}{{#equals in "path"}}, {{name}}{{/equals}}{{/parameters}}{{#requestBody}}, {{#if requestBody.selectedMedia.schema.type}}_{{resourceName}}Body{{/if}}{{^requestBody.selectedMedia.schema.type}}{{#if requestBody.selectedMedia.schema.properties}}{{#requestBody}}{{#selectedMedia}}{{#schema}}{{#properties}}{{key}}{{#unless @last}}, {{/unless}}{{/properties}}{{/schema}}{{/selectedMedia}}{{/requestBody}}{{/if}}{{/requestBody.selectedMedia.schema.type}}{{/requestBody}});
        _ = outboundEp->respond(_{{resourceName}}Res);
    }{{/value}}{{/sameResourceOperations}}{{/if}}{{#if noOperationsForPath}}{{#deprecated}} {{!-- If there is not operations available for a path generate a empty resource --}}
    deprecated {}{{/deprecated}}
    resource function {{resourceName}} (http:Caller outboundEp, http:Request _{{resourceName}}Req) {
        http:Response _{{resourceName}}Res = new;
        string _{{resourceName}}Payload = "Sample {{resourceName}} Response";
        _{{resourceName}}Res.setTextPayload(_{{resourceName}}Payload);
        _ = outboundEp->respond(_{{resourceName}}Res);
    }{{/if}}{{/value}}{{/paths}}{{#paths}}{{#value}}{{#operations}}{{#value}}{{!-- Generate Ballerina resource for single method resources --}}

    @swagger:ResourceInfo {
        summary: "{{summary}}"{{#if tags}},
        tags: [{{#tags}}"{{.}}"{{#unless @last}},{{/unless}}{{/tags}}]{{/if}}{{#if description}},
        description: "{{description}}"{{/if}}{{#if externalDocs}},
        externalDocs: {{>doc}}{{/if}}{{#if parameters}},
        parameters: [{{#parameters}}
            {
                name: "{{name}}",
                inInfo: "{{in}}",{{#schema}}
                paramType: "{{type}}",{{/schema}}
                description: "{{description}}",{{#required}}
                required: {{required}},{{/required}}{{#deprecated}}
                discontinued: {{deprecated}},{{/deprecated}}
                allowEmptyValue: "{{allowEmptyValue}}"
            }{{#unless @last}},{{/unless}}{{/parameters}}
        ]{{/if}}
    }
    @http:ResourceConfig {
        methods:["{{upper key}}"],
        path:"{{../../key}}"{{#requestBody}}{{#equals "multipart/form-data" requestBody.selectedMedia.mediaType}}{{else}},
        body:"_{{operationId}}Body"{{/equals}}{{/requestBody}}
    }{{#deprecated}}
    deprecated {}{{/deprecated}}
    resource function {{operationId}} (http:Caller outboundEp, http:Request _{{operationId}}Req{{#parameters}}{{>pathParams}}{{/parameters}}{{#requestBody}}{{>reqBody}}{{/requestBody}}) returns error? {{=<% %>=}}{<%={{ }}=%>{{#equals requestBody.selectedMedia.mediaType "multipart/form-data"}}
        mime:Entity[] _{{operationId}}Body = check _{{operationId}}Req.getBodyParts();{{/equals}}
        http:Response _{{operationId}}Res = {{operationId}}(_{{operationId}}Req{{#parameters}}{{#equals in "path"}}, {{name}}{{/equals}}{{/parameters}}{{#requestBody}}, {{#if requestBody.selectedMedia.schema.type}}_{{operationId}}Body{{/if}}{{^requestBody.selectedMedia.schema.type}}{{#if requestBody.selectedMedia.schema.properties}}{{#requestBody}}{{#selectedMedia}}{{#schema}}{{#properties}}{{key}}{{#unless @last}}, {{/unless}}{{/properties}}{{/schema}}{{/selectedMedia}}{{/requestBody}}{{/if}}{{/requestBody.selectedMedia.schema.type}}{{/requestBody}});
        _ = outboundEp->respond(_{{operationId}}Res);
    }{{/value}}{{/operations}}{{/value}}{{/paths}}

}
